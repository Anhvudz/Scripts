local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local SoundService = game:GetService("SoundService")
local MarketplaceService = game:GetService("MarketplaceService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local gethui = gethui or function() return game:GetService("CoreGui") end
local exploitGui = gethui()

-- Game-specific config detection
local gameId = tostring(game.GameId)
local placeName = "Unknown"

local success, gameInfo = pcall(function()
    return MarketplaceService:GetProductInfo(game.PlaceId)
end)

if success and gameInfo then
    placeName = gameInfo.Name:gsub("[^%w%s]", ""):gsub("%s+", "_")
else
    placeName = "Game_" .. tostring(game.PlaceId)
end

local gameConfigName = gameId .. "-" .. placeName
print("[MyHub] Detected game: " .. gameConfigName)

local hasFileIO = pcall(function() return writefile end)
local configFolder = "MyHubConfig"
local gameConfigFolder = configFolder .. "/Games"
local configFile = gameConfigFolder .. "/" .. player.Name .. "_" .. gameConfigName .. ".json"
local configData = {sliders={},toggles={},dropdowns={},keybinds={},inputs={},colors={},textboxButtons={}}

local function safeMakeFolder(folder)
    if hasFileIO and isfolder and not isfolder(folder) then 
        makefolder(folder)
        print("[MyHub] Created folder: " .. folder)
    end
end

local function safeWriteFile(file, data)
    if hasFileIO then 
        writefile(file, HttpService:JSONEncode(data))
        print("[MyHub] Saved config: " .. file)
    end
end

local function safeReadFile(file)
    if hasFileIO and isfile and isfile(file) then
        local success, result = pcall(readfile, file)
        if success then
            local decodeSuccess, decoded = pcall(HttpService.JSONDecode, HttpService, result)
            if decodeSuccess then
                print("[MyHub] Loaded config: " .. file)
                return decoded
            end
        end
    end
    return nil
end

local MyHub = {}

local Themes = {
    Default = {
        TextColor=Color3.fromRGB(240,240,240), Background=Color3.fromRGB(25,25,25), Topbar=Color3.fromRGB(34,34,34),
        ElementBackground=Color3.fromRGB(35,35,35), SliderBackground=Color3.fromRGB(50,138,220),
        ToggleEnabled=Color3.fromRGB(0,146,214), ToggleDisabled=Color3.fromRGB(100,100,100),
        DropdownSelected=Color3.fromRGB(40,40,40), DropdownUnselected=Color3.fromRGB(30,30,30),
        InputBackground=Color3.fromRGB(30,30,30), InputStroke=Color3.fromRGB(65,65,65),
        PlaceholderColor=Color3.fromRGB(178,178,178), NotificationBackground=Color3.fromRGB(20,20,20)
    },
    Ocean = {
        TextColor=Color3.fromRGB(230,240,240), Background=Color3.fromRGB(20,30,30), Topbar=Color3.fromRGB(25,40,40),
        ElementBackground=Color3.fromRGB(30,50,50), SliderBackground=Color3.fromRGB(0,110,110),
        ToggleEnabled=Color3.fromRGB(0,130,130), ToggleDisabled=Color3.fromRGB(70,90,90),
        DropdownSelected=Color3.fromRGB(30,60,60), DropdownUnselected=Color3.fromRGB(25,40,40),
        InputBackground=Color3.fromRGB(30,50,50), InputStroke=Color3.fromRGB(50,70,70),
        PlaceholderColor=Color3.fromRGB(140,160,160), NotificationBackground=Color3.fromRGB(25,35,35)
    }
}

local CurrentTheme = Themes.Default

local function ApplyTheme(window)
    if window.mainWindow then window.mainWindow.BackgroundColor3 = CurrentTheme.Background end
    if window.titleBar then window.titleBar.BackgroundColor3 = CurrentTheme.Topbar end
end

local clickSound = Instance.new("Sound")
clickSound.SoundId = "rbxassetid://156286438"
clickSound.Volume = 0.5
clickSound.Parent = SoundService

local function addButtonEffects(btn)
    btn.ClipsDescendants = true
    
    btn.MouseButton1Down:Connect(function()
        clickSound:Play()
        
        local mouse = game:GetService("Players").LocalPlayer:GetMouse()
        local btnPos = btn.AbsolutePosition
        local btnSize = btn.AbsoluteSize
        local mouseX = mouse.X - btnPos.X
        local mouseY = mouse.Y - btnPos.Y
        
        local ripple = Instance.new("Frame")
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.Position = UDim2.new(0, mouseX, 0, mouseY)
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.BackgroundColor3 = Color3.new(1, 1, 1)
        ripple.BackgroundTransparency = 0.5
        ripple.BorderSizePixel = 0
        ripple.ZIndex = btn.ZIndex + 1
        ripple.Parent = btn
        
        local rippleCorner = Instance.new("UICorner")
        rippleCorner.CornerRadius = UDim.new(1, 0)
        rippleCorner.Parent = ripple
        
        local rippleSize = math.max(btnSize.X, btnSize.Y) * 2
        TweenService:Create(ripple, TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, rippleSize, 0, rippleSize),
            BackgroundTransparency = 1
        }):Play()
        
        game:GetService("Debris"):AddItem(ripple, 0.6)
        
        for i = 1, 8 do
            local particle = Instance.new("Frame")
            particle.Size = UDim2.new(0, 6, 0, 6)
            particle.Position = UDim2.new(0, mouseX, 0, mouseY)
            particle.AnchorPoint = Vector2.new(0.5, 0.5)
            particle.BackgroundColor3 = Color3.fromRGB(math.random(100, 255), math.random(100, 255), math.random(100, 255))
            particle.BackgroundTransparency = 0
            particle.BorderSizePixel = 0
            particle.ZIndex = btn.ZIndex + 2
            particle.Parent = btn
            
            local particleCorner = Instance.new("UICorner")
            particleCorner.CornerRadius = UDim.new(1, 0)
            particleCorner.Parent = particle
            
            local angle = (i / 8) * math.pi * 2
            local distance = math.random(30, 60)
            local targetX = mouseX + math.cos(angle) * distance
            local targetY = mouseY + math.sin(angle) * distance
            
            TweenService:Create(particle, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                Position = UDim2.new(0, targetX, 0, targetY),
                Size = UDim2.new(0, 0, 0, 0),
                BackgroundTransparency = 1
            }):Play()
            
            game:GetService("Debris"):AddItem(particle, 0.5)
        end
    end)
    
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = btn.BackgroundColor3:Lerp(Color3.new(1, 1, 1), 0.1)
        }):Play()
    end)
    
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = btn.BackgroundColor3:Lerp(Color3.new(0, 0, 0), 0.1)
        }):Play()
    end)
end

-- Notification History Storage
MyHub.NotificationHistory = {}

function MyHub:Notify(title, text, time, imageId)
    table.insert(MyHub.NotificationHistory, 1, {
        title = tostring(title),
        text = tostring(text),
        time = os.date("%H:%M:%S")
    })
    if #MyHub.NotificationHistory > 50 then
        table.remove(MyHub.NotificationHistory)
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MyHubNotifications"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = exploitGui or playerGui
    
    local notif = Instance.new("Frame")
    notif.Size = UDim2.new(0,250,0,80)
    notif.Position = UDim2.new(0.5,-125,0,-100)
    notif.BackgroundColor3 = CurrentTheme.NotificationBackground
    notif.BorderSizePixel = 0
    notif.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0,8)
    corner.Parent = notif
    
    if imageId then
        local image = Instance.new("ImageLabel")
        image.Size = UDim2.new(0,20,0,20)
        image.Position = UDim2.new(0,10,0,10)
        image.Image = "rbxassetid://" .. tostring(imageId)
        image.BackgroundTransparency = 1
        image.Parent = notif
    end
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -(imageId and 40 or 10), 0.4, 0)
    titleLabel.Position = UDim2.new(0, imageId and 35 or 10, 0, 0)
    titleLabel.Text = tostring(title)
    titleLabel.TextColor3 = CurrentTheme.TextColor
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 14
    titleLabel.Parent = notif
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -(imageId and 40 or 10), 0.6, 0)
    textLabel.Position = UDim2.new(0, imageId and 35 or 10, 0.4, 0)
    textLabel.Text = tostring(text)
    textLabel.TextColor3 = Color3.new(0.9,0.9,0.9)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextSize = 12
    textLabel.TextWrapped = true
    textLabel.Parent = notif
    
    TweenService:Create(notif, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5,-125,0,10)}):Play()
    
    spawn(function()
        wait(time or 5)
        TweenService:Create(notif, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5,-125,0,-100)}):Play()
        wait(0.5)
        screenGui:Destroy()
    end)
end

local function CreateKeybind(callback)
    local binding = false
    UserInputService.InputBegan:Connect(function(input)
        if binding then
            binding = false
            callback(input.KeyCode)
        end
    end)
    return function() binding = true end
end

local function makeDraggable(dragFrame, targetFrame)
    local dragging, dragStartX, dragStartY, startPos, moveConnection, releaseConnection = false, 0, 0, nil, nil, nil
 
    local function update(input)
        if not dragging then return end
        local deltaX = input.Position.X - dragStartX
        local deltaY = input.Position.Y - dragStartY
        targetFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + deltaX, startPos.Y.Scale, startPos.Y.Offset + deltaY)
    end
 
    local function stopDrag()
        if dragging then
            dragging = false
            if moveConnection then moveConnection:Disconnect() moveConnection = nil end
            if releaseConnection then releaseConnection:Disconnect() releaseConnection = nil end
        end
    end
 
    dragFrame.InputBegan:Connect(function(input)
        if dragging or (input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch) then return end
        dragging = true
        dragStartX = input.Position.X
        dragStartY = input.Position.Y
        startPos = {X = {Scale = targetFrame.Position.X.Scale, Offset = targetFrame.Position.X.Offset}, Y = {Scale = targetFrame.Position.Y.Scale, Offset = targetFrame.Position.Y.Offset}}
        moveConnection = UserInputService.InputChanged:Connect(function(inputChange)
            if dragging and (inputChange.UserInputType == Enum.UserInputType.MouseMovement or inputChange.UserInputType == Enum.UserInputType.Touch) then
                update(inputChange)
            end
        end)
        releaseConnection = UserInputService.InputEnded:Connect(function(inputEnd)
            if inputEnd.UserInputType == Enum.UserInputType.MouseButton1 or inputEnd.UserInputType == Enum.UserInputType.Touch then
                stopDrag()
            end
        end)
    end)
end
 
local function makeSliderDraggable(sliderBar, fillBar, knob, min, max, valueLabel, configKey, callback)
    local dragging, moveConnection, releaseConnection = false, nil, nil
 
    local function update(input)
        if not dragging then return end
        local relative = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
        local value = min + (max - min) * relative
        fillBar.Size = UDim2.new(relative, 0, 1, 0)
        knob.Position = UDim2.new(relative, -4, 0, 0)
        valueLabel.Text = tostring(math.floor(value))
        if configKey then configData.sliders[configKey] = value; safeWriteFile(configFile, configData) end
        if callback then pcall(callback, value) end
    end
 
    local function stopDrag()
        if dragging then 
            dragging = false
            if moveConnection then moveConnection:Disconnect() moveConnection = nil end
            if releaseConnection then releaseConnection:Disconnect() releaseConnection = nil end
        end
    end
 
    knob.InputBegan:Connect(function(input)
        if dragging or (input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch) then return end
        dragging = true
        moveConnection = UserInputService.InputChanged:Connect(function(inputChange)
            if dragging and (inputChange.UserInputType == Enum.UserInputType.MouseMovement or inputChange.UserInputType == Enum.UserInputType.Touch) then 
                update(inputChange) 
            end
        end)
        releaseConnection = UserInputService.InputEnded:Connect(function(inputEnd)
            if inputEnd.UserInputType == Enum.UserInputType.MouseButton1 or inputEnd.UserInputType == Enum.UserInputType.Touch then 
                stopDrag() 
            end
        end)
    end)
end

-- Helper function to create nested container
local function createNestedAPI(parentFrame, startYPos)
    local NestedAPI = {}
    NestedAPI.yPos = startYPos or 0
    NestedAPI.parent = parentFrame
    
    -- Copy all section functions for nested elements
    -- This will be populated later
    
    return NestedAPI
end

function MyHub:CreateWindow(config)    if hasFileIO and isfolder and not isfolder(folder) then 
        makefolder(folder)
        print("[MyHub] Created folder: " .. folder)
    end
end

local function safeWriteFile(file, data)
    if hasFileIO then 
        writefile(file, HttpService:JSONEncode(data))
        print("[MyHub] Saved config: " .. file)
    end
end

local function safeReadFile(file)
    if hasFileIO and isfile and isfile(file) then
        local success, result = pcall(readfile, file)
        if success then
            local decodeSuccess, decoded = pcall(HttpService.JSONDecode, HttpService, result)
            if decodeSuccess then
                print("[MyHub] Loaded config: " .. file)
                return decoded
            end
        end
    end
    return nil
end

local MyHub = {}

local Themes = {
    Default = {
        TextColor=Color3.fromRGB(240,240,240), Background=Color3.fromRGB(25,25,25), Topbar=Color3.fromRGB(34,34,34),
        ElementBackground=Color3.fromRGB(35,35,35), SliderBackground=Color3.fromRGB(50,138,220),
        ToggleEnabled=Color3.fromRGB(0,146,214), ToggleDisabled=Color3.fromRGB(100,100,100),
        DropdownSelected=Color3.fromRGB(40,40,40), DropdownUnselected=Color3.fromRGB(30,30,30),
        InputBackground=Color3.fromRGB(30,30,30), InputStroke=Color3.fromRGB(65,65,65),
        PlaceholderColor=Color3.fromRGB(178,178,178), NotificationBackground=Color3.fromRGB(20,20,20)
    },
    Ocean = {
        TextColor=Color3.fromRGB(230,240,240), Background=Color3.fromRGB(20,30,30), Topbar=Color3.fromRGB(25,40,40),
        ElementBackground=Color3.fromRGB(30,50,50), SliderBackground=Color3.fromRGB(0,110,110),
        ToggleEnabled=Color3.fromRGB(0,130,130), ToggleDisabled=Color3.fromRGB(70,90,90),
        DropdownSelected=Color3.fromRGB(30,60,60), DropdownUnselected=Color3.fromRGB(25,40,40),
        InputBackground=Color3.fromRGB(30,50,50), InputStroke=Color3.fromRGB(50,70,70),
        PlaceholderColor=Color3.fromRGB(140,160,160), NotificationBackground=Color3.fromRGB(25,35,35)
    }
}

local CurrentTheme = Themes.Default

local function ApplyTheme(window)
    if window.mainWindow then window.mainWindow.BackgroundColor3 = CurrentTheme.Background end
    if window.titleBar then window.titleBar.BackgroundColor3 = CurrentTheme.Topbar end
end

local clickSound = Instance.new("Sound")
clickSound.SoundId = "rbxassetid://156286438"
clickSound.Volume = 0.5
clickSound.Parent = SoundService

local function addButtonEffects(btn)
    btn.ClipsDescendants = true
    
    btn.MouseButton1Down:Connect(function()
        clickSound:Play()
        
        local mouse = game:GetService("Players").LocalPlayer:GetMouse()
        local btnPos = btn.AbsolutePosition
        local btnSize = btn.AbsoluteSize
        local mouseX = mouse.X - btnPos.X
        local mouseY = mouse.Y - btnPos.Y
        
        local ripple = Instance.new("Frame")
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.Position = UDim2.new(0, mouseX, 0, mouseY)
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.BackgroundColor3 = Color3.new(1, 1, 1)
        ripple.BackgroundTransparency = 0.5
        ripple.BorderSizePixel = 0
        ripple.ZIndex = btn.ZIndex + 1
        ripple.Parent = btn
        
        local rippleCorner = Instance.new("UICorner")
        rippleCorner.CornerRadius = UDim.new(1, 0)
        rippleCorner.Parent = ripple
        
        local rippleSize = math.max(btnSize.X, btnSize.Y) * 2
        TweenService:Create(ripple, TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, rippleSize, 0, rippleSize),
            BackgroundTransparency = 1
        }):Play()
        
        game:GetService("Debris"):AddItem(ripple, 0.6)
        
        for i = 1, 8 do
            local particle = Instance.new("Frame")
            particle.Size = UDim2.new(0, 6, 0, 6)
            particle.Position = UDim2.new(0, mouseX, 0, mouseY)
            particle.AnchorPoint = Vector2.new(0.5, 0.5)
            particle.BackgroundColor3 = Color3.fromRGB(math.random(100, 255), math.random(100, 255), math.random(100, 255))
            particle.BackgroundTransparency = 0
            particle.BorderSizePixel = 0
            particle.ZIndex = btn.ZIndex + 2
            particle.Parent = btn
            
            local particleCorner = Instance.new("UICorner")
            particleCorner.CornerRadius = UDim.new(1, 0)
            particleCorner.Parent = particle
            
            local angle = (i / 8) * math.pi * 2
            local distance = math.random(30, 60)
            local targetX = mouseX + math.cos(angle) * distance
            local targetY = mouseY + math.sin(angle) * distance
            
            TweenService:Create(particle, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                Position = UDim2.new(0, targetX, 0, targetY),
                Size = UDim2.new(0, 0, 0, 0),
                BackgroundTransparency = 1
            }):Play()
            
            game:GetService("Debris"):AddItem(particle, 0.5)
        end
    end)
    
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = btn.BackgroundColor3:Lerp(Color3.new(1, 1, 1), 0.1)
        }):Play()
    end)
    
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = btn.BackgroundColor3:Lerp(Color3.new(0, 0, 0), 0.1)
        }):Play()
    end)
end

-- Notification History Storage
MyHub.NotificationHistory = {}

function MyHub:Notify(title, text, time, imageId)
    -- Add to history
    table.insert(MyHub.NotificationHistory, 1, {
        title = tostring(title),
        text = tostring(text),
        time = os.date("%H:%M:%S")
    })
    if #MyHub.NotificationHistory > 50 then
        table.remove(MyHub.NotificationHistory)
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MyHubNotifications"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = exploitGui or playerGui
    
    local notif = Instance.new("Frame")
    notif.Size = UDim2.new(0,250,0,80)
    notif.Position = UDim2.new(0.5,-125,0,-100)
    notif.BackgroundColor3 = CurrentTheme.NotificationBackground
    notif.BorderSizePixel = 0
    notif.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0,8)
    corner.Parent = notif
    
    if imageId then
        local image = Instance.new("ImageLabel")
        image.Size = UDim2.new(0,20,0,20)
        image.Position = UDim2.new(0,10,0,10)
        image.Image = "rbxassetid://" .. tostring(imageId)
        image.BackgroundTransparency = 1
        image.Parent = notif
    end
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -(imageId and 40 or 10), 0.4, 0)
    titleLabel.Position = UDim2.new(0, imageId and 35 or 10, 0, 0)
    titleLabel.Text = tostring(title)
    titleLabel.TextColor3 = CurrentTheme.TextColor
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 14
    titleLabel.Parent = notif
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -(imageId and 40 or 10), 0.6, 0)
    textLabel.Position = UDim2.new(0, imageId and 35 or 10, 0.4, 0)
    textLabel.Text = tostring(text)
    textLabel.TextColor3 = Color3.new(0.9,0.9,0.9)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextSize = 12
    textLabel.TextWrapped = true
    textLabel.Parent = notif
    
    TweenService:Create(notif, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5,-125,0,10)}):Play()
    
    spawn(function()
        wait(time or 5)
        TweenService:Create(notif, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5,-125,0,-100)}):Play()
        wait(0.5)
        screenGui:Destroy()
    end)
end

local function CreateKeybind(callback)
    local binding = false
    UserInputService.InputBegan:Connect(function(input)
        if binding then
            binding = false
            callback(input.KeyCode)
        end
    end)
    return function() binding = true end
end

local function makeDraggable(dragFrame, targetFrame)
    local dragging, dragStartX, dragStartY, startPos, moveConnection, releaseConnection = false, 0, 0, nil, nil, nil
 
    local function update(input)
        if not dragging then return end
        local deltaX = input.Position.X - dragStartX
        local deltaY = input.Position.Y - dragStartY
        targetFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + deltaX, startPos.Y.Scale, startPos.Y.Offset + deltaY)
    end
 
    local function stopDrag()
        if dragging then
            dragging = false
            if moveConnection then moveConnection:Disconnect() moveConnection = nil end
            if releaseConnection then releaseConnection:Disconnect() releaseConnection = nil end
        end
    end
 
    dragFrame.InputBegan:Connect(function(input)
        if dragging or (input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch) then return end
        dragging = true
        dragStartX = input.Position.X
        dragStartY = input.Position.Y
        startPos = {X = {Scale = targetFrame.Position.X.Scale, Offset = targetFrame.Position.X.Offset}, Y = {Scale = targetFrame.Position.Y.Scale, Offset = targetFrame.Position.Y.Offset}}
        moveConnection = UserInputService.InputChanged:Connect(function(inputChange)
            if dragging and (inputChange.UserInputType == Enum.UserInputType.MouseMovement or inputChange.UserInputType == Enum.UserInputType.Touch) then
                update(inputChange)
            end
        end)
        releaseConnection = UserInputService.InputEnded:Connect(function(inputEnd)
            if inputEnd.UserInputType == Enum.UserInputType.MouseButton1 or inputEnd.UserInputType == Enum.UserInputType.Touch then
                stopDrag()
            end
        end)
    end)
end
 
local function makeSliderDraggable(sliderBar, fillBar, knob, min, max, valueLabel, configKey, callback)
    local dragging, moveConnection, releaseConnection = false, nil, nil
 
    local function update(input)
        if not dragging then return end
        local relative = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
        local value = min + (max - min) * relative
        fillBar.Size = UDim2.new(relative, 0, 1, 0)
        knob.Position = UDim2.new(relative, -4, 0, 0)
        valueLabel.Text = tostring(math.floor(value))
        if configKey then configData.sliders[configKey] = value; safeWriteFile(configFile, configData) end
        if callback then pcall(callback, value) end
    end
 
    local function stopDrag()
        if dragging then 
            dragging = false
            if moveConnection then moveConnection:Disconnect() moveConnection = nil end
            if releaseConnection then releaseConnection:Disconnect() releaseConnection = nil end
        end
    end
 
    knob.InputBegan:Connect(function(input)
        if dragging or (input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch) then return end
        dragging = true
        moveConnection = UserInputService.InputChanged:Connect(function(inputChange)
            if dragging and (inputChange.UserInputType == Enum.UserInputType.MouseMovement or inputChange.UserInputType == Enum.UserInputType.Touch) then 
                update(inputChange) 
            end
        end)
        releaseConnection = UserInputService.InputEnded:Connect(function(inputEnd)
            if inputEnd.UserInputType == Enum.UserInputType.MouseButton1 or inputEnd.UserInputType == Enum.UserInputType.Touch then 
                stopDrag() 
            end
        end)
    end)
end

function MyHub:CreateWindow(config)
    local name = tostring(config.Name or "My Hub")
    local loadingTitle = tostring(config.LoadingTitle or "Loading")
    local loadingSubtitle = tostring(config.LoadingSubtitle or "")
    local WindowApi = {mainWindow = nil, titleBar = nil}
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MyHubGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = exploitGui or playerGui
    
    safeMakeFolder(configFolder)
    safeMakeFolder(gameConfigFolder)
    
    local loaded = safeReadFile(configFile)
    if loaded then 
        configData = loaded
        MyHub:Notify("Config Loaded", "Loaded settings for " .. placeName, 3, 4483362458)
    else
        MyHub:Notify("New Game", "First time running on " .. placeName, 3)
    end
    
    spawn(function() wait(0.5); MyHub:Notify("Caution", "Be careful with scripts.", 5) end)
    
    local loadingFrame = Instance.new("Frame")
    loadingFrame.Size = UDim2.new(1,0,1,0)
    loadingFrame.BackgroundColor3 = CurrentTheme.Background
    loadingFrame.Parent = screenGui
    
    local loadingTitleLabel = Instance.new("TextLabel")
    loadingTitleLabel.Size = UDim2.new(0.5,0,0,30)
    loadingTitleLabel.Position = UDim2.new(0.5,-75,0.5,-15)
    loadingTitleLabel.Text = loadingTitle
    loadingTitleLabel.TextColor3 = CurrentTheme.TextColor
    loadingTitleLabel.BackgroundTransparency = 1
    loadingTitleLabel.Font = Enum.Font.SourceSansBold
    loadingTitleLabel.TextSize = 18
    loadingTitleLabel.Parent = loadingFrame
    
    local loadingSubtitleLabel = Instance.new("TextLabel")
    loadingSubtitleLabel.Size = UDim2.new(0.5,0,0,20)
    loadingSubtitleLabel.Position = UDim2.new(0.5,-50,0.5,15)
    loadingSubtitleLabel.Text = loadingSubtitle
    loadingSubtitleLabel.TextColor3 = Color3.new(0.8,0.8,0.8)
    loadingSubtitleLabel.BackgroundTransparency = 1
    loadingSubtitleLabel.Font = Enum.Font.SourceSans
    loadingSubtitleLabel.TextSize = 14
    loadingSubtitleLabel.Parent = loadingFrame
    
    wait(1)
    loadingFrame:Destroy()
    
    MyHub:Notify("Loaded", "UI ready!", 3, 4483362458)
    
    local mainWindow = Instance.new("Frame")
    mainWindow.Name = "MainWindow"
    mainWindow.Size = UDim2.new(0,400,0,300)
    mainWindow.Position = UDim2.new(0,10,0,10)
    mainWindow.BackgroundColor3 = CurrentTheme.Background
    mainWindow.BorderSizePixel = 0
    mainWindow.Parent = screenGui
    WindowApi.mainWindow = mainWindow
    
    local windowCorner = Instance.new("UICorner")
    windowCorner.CornerRadius = UDim.new(0,8)
    windowCorner.Parent = mainWindow
    
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1,0,0,30)
    titleBar.BackgroundColor3 = CurrentTheme.Topbar
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainWindow
    WindowApi.titleBar = titleBar
    
    local titleBarCorner = Instance.new("UICorner")
    titleBarCorner.CornerRadius = UDim.new(0,8)
    titleBarCorner.Parent = titleBar
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0.5,-60,1,0)
    titleLabel.Text = name
    titleLabel.TextColor3 = CurrentTheme.TextColor
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextYAlignment = Enum.TextYAlignment.Center
    titleLabel.Parent = titleBar
    
    local gameBadge = Instance.new("TextLabel")
    gameBadge.Size = UDim2.new(0.5, -60, 1, 0)
    gameBadge.Position = UDim2.new(0.5, 0, 0, 0)
    gameBadge.Text = "🎮 " .. placeName:sub(1, 15) .. (placeName:len() > 15 and "..." or "")
    gameBadge.TextColor3 = Color3.fromRGB(100, 200, 255)
    gameBadge.BackgroundTransparency = 1
    gameBadge.Font = Enum.Font.SourceSansItalic
    gameBadge.TextSize = 11
    gameBadge.TextXAlignment = Enum.TextXAlignment.Right
    gameBadge.Parent = titleBar
    
    local tabButtons = Instance.new("Frame")
    tabButtons.Size = UDim2.new(1,0,0,30)
    tabButtons.Position = UDim2.new(0,0,0,30)
    tabButtons.BackgroundTransparency = 1
    tabButtons.Parent = mainWindow
    tabButtons.Visible = true
    
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Size = UDim2.new(1,0,1,-60)
    contentFrame.Position = UDim2.new(0,0,0,60)
    contentFrame.BackgroundTransparency = 1
    contentFrame.ScrollBarThickness = 6
    contentFrame.Parent = mainWindow
    contentFrame.CanvasSize = UDim2.new(0,0,0,0)
    contentFrame.Visible = true
    contentFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    
    local minBtn = Instance.new("TextButton")
    minBtn.Size = UDim2.new(0,30,1,0)
    minBtn.Position = UDim2.new(1,-60,0,0)
    minBtn.Text = "-"
    minBtn.TextColor3 = CurrentTheme.TextColor
    minBtn.BackgroundColor3 = Color3.new(0.2,0.6,0.2)
    minBtn.Font = Enum.Font.SourceSansBold
    minBtn.TextSize = 14
    minBtn.BorderSizePixel = 0
    minBtn.Parent = titleBar
    
    addButtonEffects(minBtn)
    
    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(0,4)
    minCorner.Parent = minBtn
    
    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0,30,1,0)
    closeBtn.Position = UDim2.new(1,-30,0,0)
    closeBtn.Text = "X"
    closeBtn.TextColor3 = CurrentTheme.TextColor
    closeBtn.BackgroundColor3 = Color3.new(0.8,0.2,0.2)
    closeBtn.Font = Enum.Font.SourceSansBold
    closeBtn.TextSize = 14
    closeBtn.BorderSizePixel = 0
    closeBtn.Parent = titleBar
    
    addButtonEffects(closeBtn)
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0,4)
    closeCorner.Parent = closeBtn
    
    local minimized, fullSize, minSize = false, UDim2.new(0,400,0,300), UDim2.new(0,400,0,30)
    
    closeBtn.MouseButton1Click:Connect(function()
        safeWriteFile(configFile, configData)
        
        -- Animated close
        TweenService:Create(mainWindow, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }):Play()
        
        TweenService:Create(mainWindow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            BackgroundTransparency = 1
        }):Play()
        
        wait(0.4)
        screenGui:Destroy()
    end)
    
    minBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        minBtn.Text = minimized and "+" or "-"
        minBtn.BackgroundColor3 = minimized and Color3.new(0.6,0.2,0.2) or Color3.new(0.2,0.6,0.2)
        TweenService:Create(mainWindow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = minimized and minSize or fullSize}):Play()
        tabButtons.Visible = not minimized
        contentFrame.Visible = not minimized
    end)
    
    makeDraggable(titleBar, mainWindow)
    
    mainWindow.BackgroundTransparency = 1
    TweenService:Create(mainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {BackgroundTransparency = 0}):Play()
    
    local tabs, activeTab = {}, nil
    
    local toggleConnection = UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.RightShift then screenGui.Enabled = not screenGui.Enabled end
    end)
    
    -- Auto-save every 60 seconds
    spawn(function()
        while screenGui.Parent do
            wait(60)
            safeWriteFile(configFile, configData)
            print("[MyHub] Auto-saved configuration")
        end
    end)
    
    -- Quick save keybind (Ctrl+S)
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.S and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            safeWriteFile(configFile, configData)
            MyHub:Notify("Quick Save", "Configuration saved! (Ctrl+S)", 2, 4483362458)
        end
    end)
    
    screenGui.AncestryChanged:Connect(function()
        if not screenGui.Parent then 
            safeWriteFile(configFile, configData)
            if toggleConnection then toggleConnection:Disconnect() end 
        end
    end)
    
    function WindowApi:NewTab(config)
        local tabName = tostring(config.Name or "Tab")
        local TabApi = {}
        local tabContent = Instance.new("Frame")
        tabContent.Name = tabName .. "Content"
        tabContent.Size = UDim2.new(1,0,1,0)
        tabContent.BackgroundTransparency = 1
        tabContent.Visible = false
        tabContent.Parent = contentFrame
        
        local tabBtn = Instance.new("TextButton")
        tabBtn.Size = UDim2.new(0,100,1,0)
        tabBtn.BackgroundColor3 = Color3.new(0.3,0.3,0.3)
        tabBtn.TextColor3 = CurrentTheme.TextColor
        tabBtn.Font = Enum.Font.SourceSans
        tabBtn.TextSize = 12
        tabBtn.Text = tabName
        tabBtn.BorderSizePixel = 0
        tabBtn.Parent = tabButtons
        
        addButtonEffects(tabBtn)
        
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0,4)
        tabCorner.Parent = tabBtn
        
        local sections = {}
        local tab = {name = tabName, button = tabBtn, content = tabContent, yPos = 0, sections = sections}
        
        local function updateTabButtons()
            local numTabs = #tabs
            for i, t in ipairs(tabs) do
                t.button.Size = UDim2.new(1 / numTabs, 0, 1, 0)
                t.button.Position = UDim2.new((i - 1) / numTabs, 0, 0, 0)
            end
        end
        
        local function switchToTab()
            for _, t in ipairs(tabs) do
                t.content.Visible = false
                t.button.BackgroundColor3 = Color3.new(0.3,0.3,0.3)
            end
            tab.content.Visible = true
            tab.button.BackgroundColor3 = Color3.new(0.4,0.4,0.4)
            contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200))
            activeTab = tab
        end
        
        tabBtn.MouseButton1Click:Connect(switchToTab)
        
        table.insert(tabs, tab)
        updateTabButtons()
        
        if #tabs == 1 then switchToTab() end
        
        function TabApi:NewSection(config)
            local sectionName = tostring(config.Name or "Section")
            local SectionApi = {}
            local sectionLabel = Instance.new("TextLabel")
            sectionLabel.Size = UDim2.new(1,0,0,20)
            sectionLabel.Position = UDim2.new(0,0,0, tab.yPos)
            sectionLabel.Text = sectionName
            sectionLabel.TextColor3 = Color3.new(0.8,0.8,0.8)
            sectionLabel.BackgroundTransparency = 1
            sectionLabel.Font = Enum.Font.SourceSans
            sectionLabel.TextSize = 14
            sectionLabel.Parent = tab.content
            
            tab.yPos = tab.yPos + 25
            
            function SectionApi:NewButton(config)
                local buttonName = tostring(config.Name or "Button")
                local callback = config.Callback or function() end
                local btn = Instance.new("TextButton")
                btn.Size = UDim2.new(1,-20,0,30)
                btn.Position = UDim2.new(0,10,0, tab.yPos)
                btn.Text = buttonName
                btn.TextColor3 = CurrentTheme.TextColor
                btn.BackgroundColor3 = CurrentTheme.ElementBackground
                btn.Font = Enum.Font.SourceSans
                btn.TextSize = 14
                btn.BorderSizePixel = 0
                btn.Parent = tab.content
                
                addButtonEffects(btn)
                
                local btnCorner = Instance.new("UICorner")
                btnCorner.CornerRadius = UDim.new(0,4)
                btnCorner.Parent = btn
                
                btn.MouseButton1Click:Connect(function() pcall(callback) end)
                
                tab.yPos = tab.yPos + 40
                if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
            end



-- MyHub v2.0 - Nested Elements Addon
-- Add this code to enable nested elements in buttons, sliders, etc.
-- Place this AFTER your existing SectionAPI functions

-- Helper function to create nested container with scrolling
local function createNestedContainer(parentElement, title)
    local NestedAPI = {}
    NestedAPI.yPos = 0
    NestedAPI.expanded = false
    
    -- Create expand button
    local expandBtn = Instance.new("TextButton")
    expandBtn.Size = UDim2.new(0, 30, 1, 0)
    expandBtn.Position = UDim2.new(1, -35, 0, 0)
    expandBtn.Text = "▼"
    expandBtn.TextColor3 = CurrentTheme.TextColor
    expandBtn.BackgroundTransparency = 1
    expandBtn.Font = Enum.Font.SourceSansBold
    expandBtn.TextSize = 14
    expandBtn.ZIndex = parentElement.ZIndex + 1
    expandBtn.Parent = parentElement
    
    -- Create nested container (hidden by default)
    local nestedFrame = Instance.new("Frame")
    nestedFrame.Size = UDim2.new(1, 0, 0, 0)
    nestedFrame.Position = UDim2.new(0, 0, 1, 5)
    nestedFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    nestedFrame.BorderSizePixel = 0
    nestedFrame.Visible = false
    nestedFrame.ZIndex = parentElement.ZIndex + 2
    nestedFrame.Parent = parentElement
    
    local nestedCorner = Instance.new("UICorner")
    nestedCorner.CornerRadius = UDim.new(0, 6)
    nestedCorner.Parent = nestedFrame
    
    -- Scrolling frame inside
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -10)
    scrollFrame.Position = UDim2.new(0, 5, 0, 5)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.ScrollBarThickness = 4
    scrollFrame.BorderSizePixel = 0
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollFrame.ZIndex = parentElement.ZIndex + 3
    scrollFrame.Parent = nestedFrame
    
    NestedAPI.scrollFrame = scrollFrame
    NestedAPI.nestedFrame = nestedFrame
    
    -- Toggle expand/collapse
    expandBtn.MouseButton1Click:Connect(function()
        NestedAPI.expanded = not NestedAPI.expanded
        expandBtn.Text = NestedAPI.expanded and "▲" or "▼"
        
        if NestedAPI.expanded then
            nestedFrame.Visible = true
            local targetHeight = math.min(NestedAPI.yPos + 20, 200)
            TweenService:Create(nestedFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                Size = UDim2.new(1, 0, 0, targetHeight)
            }):Play()
        else
            TweenService:Create(nestedFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                Size = UDim2.new(1, 0, 0, 0)
            }):Play()
            wait(0.3)
            nestedFrame.Visible = false
        end
    end)
    
    -- Add all element creation functions to NestedAPI
    function NestedAPI:NewButton(config)
        local buttonName = tostring(config.Name or "Button")
        local callback = config.Callback or function() end
        
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, -10, 0, 30)
        btn.Position = UDim2.new(0, 5, 0, self.yPos)
        btn.Text = buttonName
        btn.TextColor3 = CurrentTheme.TextColor
        btn.BackgroundColor3 = CurrentTheme.ElementBackground
        btn.Font = Enum.Font.SourceSans
        btn.TextSize = 12
        btn.BorderSizePixel = 0
        btn.ZIndex = scrollFrame.ZIndex + 1
        btn.Parent = scrollFrame
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 4)
        btnCorner.Parent = btn
        
        addButtonEffects(btn)
        btn.MouseButton1Click:Connect(function() pcall(callback) end)
        
        self.yPos = self.yPos + 35
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, self.yPos)
        
        -- Allow nesting inside this button too!
        local buttonAPI = createNestedContainer(btn, buttonName)
        for k, v in pairs(buttonAPI) do
            if k ~= "yPos" and k ~= "expanded" then
                btn[k] = v
            end
        end
        
        return btn
    end
    
    function NestedAPI:NewLabel(config)
        local labelText = tostring(config.Name or "Label")
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -10, 0, 25)
        label.Position = UDim2.new(0, 5, 0, self.yPos)
        label.Text = labelText
        label.TextColor3 = CurrentTheme.TextColor
        label.BackgroundColor3 = CurrentTheme.ElementBackground
        label.Font = Enum.Font.SourceSans
        label.TextSize = 12
        label.BorderSizePixel = 0
        label.TextWrapped = true
        label.ZIndex = scrollFrame.ZIndex + 1
        label.Parent = scrollFrame
        
        local labelCorner = Instance.new("UICorner")
        labelCorner.CornerRadius = UDim.new(0, 4)
        labelCorner.Parent = label
        
        self.yPos = self.yPos + 30
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, self.yPos)
        
        return {
            SetText = function(_, text)
                label.Text = tostring(text)
            end
        }
    end
    
    function NestedAPI:NewSlider(config)
        local sliderName = tostring(config.Name or "Slider")
        local min = config.Range[1] or 0
        local max = config.Range[2] or 100
        local default = config.CurrentValue or min
        local callback = config.Callback or function() end
        
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Size = UDim2.new(1, -10, 0, 50)
        sliderFrame.Position = UDim2.new(0, 5, 0, self.yPos)
        sliderFrame.BackgroundColor3 = CurrentTheme.ElementBackground
        sliderFrame.BorderSizePixel = 0
        sliderFrame.ZIndex = scrollFrame.ZIndex + 1
        sliderFrame.Parent = scrollFrame
        
        local frameCorner = Instance.new("UICorner")
        frameCorner.CornerRadius = UDim.new(0, 4)
        frameCorner.Parent = sliderFrame
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0.4, 0)
        label.Text = sliderName
        label.TextColor3 = CurrentTheme.TextColor
        label.BackgroundTransparency = 1
        label.Font = Enum.Font.SourceSans
        label.TextSize = 12
        label.ZIndex = sliderFrame.ZIndex + 1
        label.Parent = sliderFrame
        
        local sliderBar = Instance.new("Frame")
        sliderBar.Size = UDim2.new(1, 0, 0.2, 0)
        sliderBar.Position = UDim2.new(0, 0, 0.6, 0)
        sliderBar.BackgroundColor3 = CurrentTheme.SliderBackground
        sliderBar.BorderSizePixel = 0
        sliderBar.ZIndex = sliderFrame.ZIndex + 1
        sliderBar.Parent = sliderFrame
        
        local barCorner = Instance.new("UICorner")
        barCorner.CornerRadius = UDim.new(0, 4)
        barCorner.Parent = sliderBar
        
        local initialRelative = (default - min) / (max - min)
        local fillBar = Instance.new("Frame")
        fillBar.Size = UDim2.new(initialRelative, 0, 1, 0)
        fillBar.BackgroundColor3 = Color3.new(0, 1, 0)
        fillBar.BorderSizePixel = 0
        fillBar.ZIndex = sliderBar.ZIndex + 1
        fillBar.Parent = sliderBar
        
        local fillCorner = Instance.new("UICorner")
        fillCorner.CornerRadius = UDim.new(0, 4)
        fillCorner.Parent = fillBar
        
        local knob = Instance.new("Frame")
        knob.Size = UDim2.new(0, 8, 1, 0)
        knob.Position = UDim2.new(initialRelative, -4, 0, 0)
        knob.BackgroundColor3 = CurrentTheme.TextColor
        knob.ZIndex = fillBar.ZIndex + 1
        knob.Parent = sliderBar
        
        local knobCorner = Instance.new("UICorner")
        knobCorner.CornerRadius = UDim.new(0, 4)
        knobCorner.Parent = knob
        
        local valueLabel = Instance.new("TextLabel")
        valueLabel.Size = UDim2.new(0.3, 0, 0.4, 0)
        valueLabel.Position = UDim2.new(0.7, 0, 0.6, 0)
        valueLabel.Text = tostring(math.floor(default))
        valueLabel.TextColor3 = CurrentTheme.TextColor
        valueLabel.BackgroundTransparency = 1
        valueLabel.Font = Enum.Font.SourceSansBold
        valueLabel.TextSize = 12
        valueLabel.ZIndex = sliderFrame.ZIndex + 1
        valueLabel.Parent = sliderFrame
        
        makeSliderDraggable(sliderBar, fillBar, knob, min, max, valueLabel, nil, callback)
        
        self.yPos = self.yPos + 55
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, self.yPos)
        
        -- Allow nesting inside slider
        local sliderAPI = createNestedContainer(sliderFrame, sliderName)
        for k, v in pairs(sliderAPI) do
            if k ~= "yPos" and k ~= "expanded" then
                sliderFrame[k] = v
            end
        end
        
        return sliderFrame
    end
    
    function NestedAPI:NewToggle(config)
        local toggleName = tostring(config.Name or "Toggle")
        local default = config.CurrentValue or false
        local callback = config.Callback or function() end
        
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Size = UDim2.new(1, -10, 0, 30)
        toggleFrame.Position = UDim2.new(0, 5, 0, self.yPos)
        toggleFrame.BackgroundColor3 = CurrentTheme.ElementBackground
        toggleFrame.BorderSizePixel = 0
        toggleFrame.ZIndex = scrollFrame.ZIndex + 1
        toggleFrame.Parent = scrollFrame
        
        local frameCorner = Instance.new("UICorner")
        frameCorner.CornerRadius = UDim.new(0, 4)
        frameCorner.Parent = toggleFrame
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.7, 0, 1, 0)
        label.Text = toggleName
        label.TextColor3 = CurrentTheme.TextColor
        label.BackgroundTransparency = 1
        label.Font = Enum.Font.SourceSans
        label.TextSize = 12
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.ZIndex = toggleFrame.ZIndex + 1
        label.Parent = toggleFrame
        
        local toggleBg = Instance.new("Frame")
        toggleBg.Size = UDim2.new(0, 45, 0, 22)
        toggleBg.Position = UDim2.new(1, -50, 0.5, -11)
        toggleBg.BackgroundColor3 = default and Color3.fromRGB(52, 199, 89) or Color3.fromRGB(120, 120, 128)
        toggleBg.BorderSizePixel = 0
        toggleBg.ZIndex = toggleFrame.ZIndex + 1
        toggleBg.Parent = toggleFrame
        
        local bgCorner = Instance.new("UICorner")
        bgCorner.CornerRadius = UDim.new(1, 0)
        bgCorner.Parent = toggleBg
        
        local knob = Instance.new("Frame")
        knob.Size = UDim2.new(0, 18, 0, 18)
        knob.Position = default and UDim2.new(0, 25, 0.5, -9) or UDim2.new(0, 2, 0.5, -9)
        knob.BackgroundColor3 = Color3.new(1, 1, 1)
        knob.BorderSizePixel = 0
        knob.ZIndex = toggleBg.ZIndex + 1
        knob.Parent = toggleBg
        
        local knobCorner = Instance.new("UICorner")
        knobCorner.CornerRadius = UDim.new(1, 0)
        knobCorner.Parent = knob
        
        local enabled = default
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(1, 0, 1, 0)
        toggleButton.BackgroundTransparency = 1
        toggleButton.Text = ""
        toggleButton.ZIndex = toggleBg.ZIndex + 1
        toggleButton.Parent = toggleBg
        
        toggleButton.MouseButton1Click:Connect(function()
            enabled = not enabled
            clickSound:Play()
            
            TweenService:Create(toggleBg, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                BackgroundColor3 = enabled and Color3.fromRGB(52, 199, 89) or Color3.fromRGB(120, 120, 128)
            }):Play()
            
            TweenService:Create(knob, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                Position = enabled and UDim2.new(0, 25, 0.5, -9) or UDim2.new(0, 2, 0.5, -9)
            }):Play()
            
            pcall(callback, enabled)
        end)
        
        self.yPos = self.yPos + 35
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, self.yPos)
        
        -- Allow nesting
        local toggleAPI = createNestedContainer(toggleFrame, toggleName)
        for k, v in pairs(toggleAPI) do
            if k ~= "yPos" and k ~= "expanded" then
                toggleFrame[k] = v
            end
        end
        
        return toggleFrame
    end
    
    function NestedAPI:NewTextBoxButton(config)
        local name = tostring(config.Name or "TextBox Button")
        local placeholder = tostring(config.PlaceholderText or "Enter text...")
        local buttonText = tostring(config.ButtonText or "Submit")
        local callback = config.Callback or function() end
        
        local tbFrame = Instance.new("Frame")
        tbFrame.Size = UDim2.new(1, -10, 0, 35)
        tbFrame.Position = UDim2.new(0, 5, 0, self.yPos)
        tbFrame.BackgroundColor3 = CurrentTheme.ElementBackground
        tbFrame.BorderSizePixel = 0
        tbFrame.ZIndex = scrollFrame.ZIndex + 1
        tbFrame.Parent = scrollFrame
        
        local frameCorner = Instance.new("UICorner")
        frameCorner.CornerRadius = UDim.new(0, 4)
        frameCorner.Parent = tbFrame
        
        local textBox = Instance.new("TextBox")
        textBox.Size = UDim2.new(0.65, -5, 0, 25)
        textBox.Position = UDim2.new(0, 5, 0.5, -12.5)
        textBox.PlaceholderText = placeholder
        textBox.Text = ""
        textBox.TextColor3 = CurrentTheme.TextColor
        textBox.PlaceholderColor3 = CurrentTheme.PlaceholderColor
        textBox.BackgroundColor3 = CurrentTheme.InputBackground
        textBox.BorderSizePixel = 0
        textBox.Font = Enum.Font.SourceSans
        textBox.TextSize = 11
        textBox.TextXAlignment = Enum.TextXAlignment.Left
        textBox.ClearTextOnFocus = false
        textBox.ZIndex = tbFrame.ZIndex + 1
        textBox.Parent = tbFrame
        
        local boxCorner = Instance.new("UICorner")
        boxCorner.CornerRadius = UDim.new(0, 4)
        boxCorner.Parent = textBox
        
        local submitBtn = Instance.new("TextButton")
        submitBtn.Size = UDim2.new(0.35, -5, 0, 25)
        submitBtn.Position = UDim2.new(0.65, 5, 0.5, -12.5)
        submitBtn.Text = buttonText
        submitBtn.TextColor3 = Color3.new(1, 1, 1)
        submitBtn.BackgroundColor3 = Color3.fromRGB(33, 150, 243)
        submitBtn.Font = Enum.Font.SourceSansBold
        submitBtn.TextSize = 11
        submitBtn.BorderSizePixel = 0
        submitBtn.ZIndex = tbFrame.ZIndex + 1
        submitBtn.Parent = tbFrame
        
        addButtonEffects(submitBtn)
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 4)
        btnCorner.Parent = submitBtn
        
        submitBtn.MouseButton1Click:Connect(function()
            if textBox.Text ~= "" then
                pcall(callback, textBox.Text)
            end
        end)
        
        textBox.FocusLost:Connect(function(enterPressed)
            if enterPressed and textBox.Text ~= "" then
                pcall(callback, textBox.Text)
            end
        end)
        
        self.yPos = self.yPos + 40
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, self.yPos)
        
        return {
            GetText = function() return textBox.Text end,
            SetText = function(_, text) textBox.Text = tostring(text) end
        }
    end
    
    return NestedAPI
end

-- Example Usage:
--[[
local MainTab = Window:NewTab({Name = "Main"})
local Section = MainTab:NewSection({Name = "Test"})

local myButton = Section:NewButton({
    Name = "Click Me",
    Callback = function()
        print("Button clicked!")
    end
})

-- Now you can add nested elements inside the button!
myButton:NewLabel({Name = "Label inside button!"})

myButton:NewSlider({
    Name = "Nested Slider",
    Range = {0, 100},
    CurrentValue = 50,
    Callback = function(value)
        print("Nested slider value:", value)
    end
})

myButton:NewToggle({
    Name = "Nested Toggle",
    CurrentValue = false,
    Callback = function(enabled)
        print("Nested toggle:", enabled)
    end
})
]]



            
            function SectionApi:NewToggle(config)
                local toggleName = tostring(config.Name or "Toggle")
                local default = config.CurrentValue or false
                local callback = config.Callback or function() end
                local configKey = config.Flag
                if configKey and configData.toggles[configKey] ~= nil then default = configData.toggles[configKey] end
                
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Size = UDim2.new(1,-20,0,30)
                toggleFrame.Position = UDim2.new(0,10,0, tab.yPos)
                toggleFrame.BackgroundColor3 = CurrentTheme.ElementBackground
                toggleFrame.BorderSizePixel = 0
                toggleFrame.Parent = tab.content
                
                local frameCorner = Instance.new("UICorner")
                frameCorner.CornerRadius = UDim.new(0,4)
                frameCorner.Parent = toggleFrame
                
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0.7,0,1,0)
                label.Text = toggleName
                label.TextColor3 = CurrentTheme.TextColor
                label.BackgroundTransparency = 1
                label.Font = Enum.Font.SourceSans
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.TextYAlignment = Enum.TextYAlignment.Center
                label.Parent = toggleFrame
                
                -- iOS-style toggle background
                local toggleBg = Instance.new("Frame")
                toggleBg.Size = UDim2.new(0, 50, 0, 25)
                toggleBg.Position = UDim2.new(1, -60, 0.5, -12.5)
                toggleBg.BackgroundColor3 = default and Color3.fromRGB(52, 199, 89) or Color3.fromRGB(120, 120, 128)
                toggleBg.BorderSizePixel = 0
                toggleBg.Parent = toggleFrame
                
                local bgCorner = Instance.new("UICorner")
                bgCorner.CornerRadius = UDim.new(1, 0)
                bgCorner.Parent = toggleBg
                
                -- Toggle knob (circle)
                local knob = Instance.new("Frame")
                knob.Size = UDim2.new(0, 21, 0, 21)
                knob.Position = default and UDim2.new(0, 27, 0.5, -10.5) or UDim2.new(0, 2, 0.5, -10.5)
                knob.BackgroundColor3 = Color3.new(1, 1, 1)
                knob.BorderSizePixel = 0
                knob.Parent = toggleBg
                
                local knobCorner = Instance.new("UICorner")
                knobCorner.CornerRadius = UDim.new(1, 0)
                knobCorner.Parent = knob
                
                -- Shadow for knob
                local shadow = Instance.new("ImageLabel")
                shadow.Size = UDim2.new(1, 6, 1, 6)
                shadow.Position = UDim2.new(0.5, -3, 0.5, -3)
                shadow.AnchorPoint = Vector2.new(0.5, 0.5)
                shadow.BackgroundTransparency = 1
                shadow.Image = "rbxassetid://1316045217"
                shadow.ImageColor3 = Color3.new(0, 0, 0)
                shadow.ImageTransparency = 0.7
                shadow.ScaleType = Enum.ScaleType.Slice
                shadow.SliceCenter = Rect.new(10, 10, 118, 118)
                shadow.ZIndex = knob.ZIndex - 1
                shadow.Parent = knob
                
                local enabled = default
                
                local toggleButton = Instance.new("TextButton")
                toggleButton.Size = UDim2.new(1, 0, 1, 0)
                toggleButton.BackgroundTransparency = 1
                toggleButton.Text = ""
                toggleButton.Parent = toggleBg
                
                toggleButton.MouseButton1Click:Connect(function()
                    enabled = not enabled
                    clickSound:Play()
                    
                    TweenService:Create(toggleBg, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                        BackgroundColor3 = enabled and Color3.fromRGB(52, 199, 89) or Color3.fromRGB(120, 120, 128)
                    }):Play()
                    
                    TweenService:Create(knob, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                        Position = enabled and UDim2.new(0, 27, 0.5, -10.5) or UDim2.new(0, 2, 0.5, -10.5)
                    }):Play()
                    
                    pcall(callback, enabled)
                    if configKey then configData.toggles[configKey] = enabled; safeWriteFile(configFile, configData) end
                end)
                
                pcall(callback, default)
                
                tab.yPos = tab.yPos + 40
                if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
                return toggleButton
            end
            
            function SectionApi:NewSlider(config)
                local sliderName = tostring(config.Name or "Slider")
                local min = config.Range[1] or 0
                local max = config.Range[2] or 100
                local default = config.CurrentValue or min
                local callback = config.Callback or function() end
                local configKey = config.Flag
                if configKey and configData.sliders[configKey] then default = configData.sliders[configKey] end
                
                local sliderFrame = Instance.new("Frame")
                sliderFrame.Size = UDim2.new(1,-20,0,50)
                sliderFrame.Position = UDim2.new(0,10,0, tab.yPos)
                sliderFrame.BackgroundColor3 = CurrentTheme.ElementBackground
                sliderFrame.BorderSizePixel = 0
                sliderFrame.Parent = tab.content
                
                local frameCorner = Instance.new("UICorner")
                frameCorner.CornerRadius = UDim.new(0,4)
                frameCorner.Parent = sliderFrame
                
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1,0,0.4,0)
                label.Text = sliderName
                label.TextColor3 = CurrentTheme.TextColor
                label.BackgroundTransparency = 1
                label.Font = Enum.Font.SourceSans
                label.TextSize = 14
                label.Parent = sliderFrame
                
                local sliderBar = Instance.new("Frame")
                sliderBar.Size = UDim2.new(1,0,0.2,0)
                sliderBar.Position = UDim2.new(0,0,0.6,0)
                sliderBar.BackgroundColor3 = CurrentTheme.SliderBackground
                sliderBar.BorderSizePixel = 0
                sliderBar.Parent = sliderFrame
                
                local barCorner = Instance.new("UICorner")
                barCorner.CornerRadius = UDim.new(0,4)
                barCorner.Parent = sliderBar
                
                local initialRelative = (default - min) / (max - min)
                local fillBar = Instance.new("Frame")
                fillBar.Size = UDim2.new(initialRelative, 0, 1, 0)
                fillBar.BackgroundColor3 = Color3.new(0,1,0)
                fillBar.BorderSizePixel = 0
                fillBar.Parent = sliderBar
                
                local fillCorner = Instance.new("UICorner")
                fillCorner.CornerRadius = UDim.new(0,4)
                fillCorner.Parent = fillBar
                
                local knob = Instance.new("Frame")
                knob.Size = UDim2.new(0,8,1,0)
                knob.Position = UDim2.new(initialRelative, -4, 0, 0)
                knob.BackgroundColor3 = CurrentTheme.TextColor
                knob.Parent = sliderBar
                
                local knobCorner = Instance.new("UICorner")
                knobCorner.CornerRadius = UDim.new(0,4)
                knobCorner.Parent = knob
                
                local valueLabel = Instance.new("TextLabel")
                valueLabel.Size = UDim2.new(0.3,0,0.4,0)
                valueLabel.Position = UDim2.new(0.7,0,0.6,0)
                valueLabel.Text = tostring(math.floor(default))
                valueLabel.TextColor3 = CurrentTheme.TextColor
                valueLabel.BackgroundTransparency = 1
                valueLabel.Font = Enum.Font.SourceSansBold
                valueLabel.TextSize = 12
                valueLabel.Parent = sliderFrame
                
                makeSliderDraggable(sliderBar, fillBar, knob, min, max, valueLabel, configKey, callback)
                
                tab.yPos = tab.yPos + 60
                if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
            end
            
            function SectionApi:NewDropdown(config)
                local dropdownName = tostring(config.Name or "Dropdown")
                local options = config.Options or {}
                local default = config.CurrentOption or options[1]
                local callback = config.Callback or function() end
                local configKey = config.Flag
                if configKey and configData.dropdowns[configKey] then default = configData.dropdowns[configKey] end
                
                local dropdownFrame = Instance.new("Frame")
                dropdownFrame.Size = UDim2.new(1,-20,0,30)
                dropdownFrame.Position = UDim2.new(0,10,0, tab.yPos)
                dropdownFrame.BackgroundColor3 = CurrentTheme.ElementBackground
                dropdownFrame.BorderSizePixel = 0
                dropdownFrame.Parent = tab.content
                
                local frameCorner = Instance.new("UICorner")
                frameCorner.CornerRadius = UDim.new(0,4)
                frameCorner.Parent = dropdownFrame
                
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0.8,0,1,0)
                label.Text = dropdownName .. ": " .. tostring(default)
                label.TextColor3 = CurrentTheme.TextColor
                label.BackgroundTransparency = 1
                label.Font = Enum.Font.SourceSans
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.TextYAlignment = Enum.TextYAlignment.Center
                label.Parent = dropdownFrame
                
                local dropdownBtn = Instance.new("TextButton")
                dropdownBtn.Size = UDim2.new(0.2,0,1,0)
                dropdownBtn.Position = UDim2.new(0.8,0,0,0)
                dropdownBtn.Text = "▼"
                dropdownBtn.BackgroundTransparency = 1
                dropdownBtn.TextColor3 = CurrentTheme.TextColor
                dropdownBtn.Font = Enum.Font.SourceSansBold
                dropdownBtn.TextSize = 12
                dropdownBtn.Parent = dropdownFrame
                
                addButtonEffects(dropdownBtn)
                
                local dropdownList = Instance.new("ScrollingFrame")
                dropdownList.Size = UDim2.new(1,0,0, math.min(#options * 25, 150))
                dropdownList.Position = UDim2.new(0,0,1,0)
                dropdownList.BackgroundColor3 = CurrentTheme.DropdownSelected
                dropdownList.Visible = false
                dropdownList.ScrollBarThickness = 4
                dropdownList.Parent = dropdownFrame
                
                local listCorner = Instance.new("UICorner")
                listCorner.CornerRadius = UDim.new(0,4)
                listCorner.Parent = dropdownList
                
                for i, option in ipairs(options) do
                    local optBtn = Instance.new("TextButton")
                    optBtn.Size = UDim2.new(1,0,0,25)
                    optBtn.Position = UDim2.new(0,0,0, (i-1)*25)
                    optBtn.Text = tostring(option)
                    optBtn.TextColor3 = CurrentTheme.TextColor
                    optBtn.BackgroundColor3 = CurrentTheme.DropdownUnselected
                    optBtn.Font = Enum.Font.SourceSans
                    optBtn.TextSize = 12
                    optBtn.BorderSizePixel = 0
                    optBtn.Parent = dropdownList
                    
                    addButtonEffects(optBtn)
                    
                    local optCorner = Instance.new("UICorner")
                    optCorner.CornerRadius = UDim.new(0,2)
                    optCorner.Parent = optBtn
                    
                    optBtn.MouseButton1Click:Connect(function()
                        label.Text = dropdownName .. ": " .. tostring(option)
                        dropdownList.Visible = false
                        pcall(callback, option)
                        if configKey then configData.dropdowns[configKey] = option; safeWriteFile(configFile, configData) end
                    end)
                end
                
                dropdownList.CanvasSize = UDim2.new(0,0,0, #options * 25)
                
                dropdownBtn.MouseButton1Click:Connect(function() dropdownList.Visible = not dropdownList.Visible end)
                
                tab.yPos = tab.yPos + 40 + math.min(#options * 25, 150)
                if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
                return dropdownFrame
            end
            
            function SectionApi:NewKeybind(config)
                local keybindName = tostring(config.Name or "Keybind")
                local default = config.CurrentKeybind or Enum.KeyCode.K
                local callback = config.Callback or function() end
                local configKey = config.Flag
                if configKey and configData.keybinds[configKey] then
                    local keyName = configData.keybinds[configKey]
                    if Enum.KeyCode[keyName] then default = Enum.KeyCode[keyName] end
                end
                
                local keybindFrame = Instance.new("Frame")
                keybindFrame.Size = UDim2.new(1,-20,0,30)
                keybindFrame.Position = UDim2.new(0,10,0, tab.yPos)
                keybindFrame.BackgroundColor3 = CurrentTheme.ElementBackground
                keybindFrame.BorderSizePixel = 0
                keybindFrame.Parent = tab.content
                
                local frameCorner = Instance.new("UICorner")
                frameCorner.CornerRadius = UDim.new(0,4)
                frameCorner.Parent = keybindFrame
                
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0.7,0,1,0)
                label.Text = keybindName .. ": "
                label.TextColor3 = CurrentTheme.TextColor
                label.BackgroundTransparency = 1
                label.Font = Enum.Font.SourceSans
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.TextYAlignment = Enum.TextYAlignment.Center
                label.Parent = keybindFrame
                
                local keybindBtn = Instance.new("TextButton")
                keybindBtn.Size = UDim2.new(0.3,0,1,0)
                keybindBtn.Position = UDim2.new(0.7,0,0,0)
                keybindBtn.Text = tostring(default.Name)
                keybindBtn.BackgroundColor3 = CurrentTheme.InputBackground
                keybindBtn.TextColor3 = CurrentTheme.TextColor
                keybindBtn.Font = Enum.Font.SourceSansBold
                keybindBtn.TextSize = 12
                keybindBtn.BorderSizePixel = 0
                keybindBtn.Parent = keybindFrame
                
                addButtonEffects(keybindBtn)
                
                local btnCorner = Instance.new("UICorner")
                btnCorner.CornerRadius = UDim.new(0,4)
                btnCorner.Parent = keybindBtn
                
                local bindFunc = CreateKeybind(function(newKey)
                    keybindBtn.Text = tostring(newKey.Name)
                    pcall(callback, newKey)
                    if configKey then configData.keybinds[configKey] = newKey.Name; safeWriteFile(configFile, configData) end
                end)
                
                keybindBtn.MouseButton1Click:Connect(bindFunc)
                
                tab.yPos = tab.yPos + 40
                if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
                return keybindBtn
            end


function SectionApi:NewProgressBar(config)
    local barName = tostring(config.Name or "Progress")
    local max = config.Max or 100
    
    local barFrame = Instance.new("Frame")
    barFrame.Size = UDim2.new(1,-20,0,50)
    barFrame.Position = UDim2.new(0,10,0, tab.yPos)
    barFrame.BackgroundColor3 = CurrentTheme.ElementBackground
    barFrame.BorderSizePixel = 0
    barFrame.Parent = tab.content
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0,4)
    frameCorner.Parent = barFrame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,-10,0.3,0)
    label.Position = UDim2.new(0,5,0,5)
    label.Text = barName .. " (0%)"
    label.TextColor3 = CurrentTheme.TextColor
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 13
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = barFrame
    
    local progressBg = Instance.new("Frame")
    progressBg.Size = UDim2.new(1,-10,0.35,0)
    progressBg.Position = UDim2.new(0,5,0.5,0)
    progressBg.BackgroundColor3 = Color3.fromRGB(40,40,40)
    progressBg.BorderSizePixel = 0
    progressBg.Parent = barFrame
    
    local bgCorner = Instance.new("UICorner")
    bgCorner.CornerRadius = UDim.new(0,6)
    bgCorner.Parent = progressBg
    
    local progressFill = Instance.new("Frame")
    progressFill.Size = UDim2.new(0,0,1,0)
    progressFill.BackgroundColor3 = Color3.fromRGB(76,175,80)
    progressFill.BorderSizePixel = 0
    progressFill.Parent = progressBg
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0,6)
    fillCorner.Parent = progressFill
    
    -- Animated gradient
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(76,175,80)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(100,255,100))
    }
    gradient.Parent = progressFill
    
    -- Animate gradient
    spawn(function()
        while progressFill.Parent do
            TweenService:Create(gradient, TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true), {
                Offset = Vector2.new(1, 0)
            }):Play()
            wait(2)
        end
    end)
    
    tab.yPos = tab.yPos + 60
    if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
    
    return {
        Set = function(self, value)
            local percent = math.clamp(value / max, 0, 1)
            label.Text = barName .. " (" .. math.floor(percent * 100) .. "%)"
            TweenService:Create(progressFill, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                Size = UDim2.new(percent, 0, 1, 0)
            }):Play()
            
            -- Color changes based on progress
            local color
            if percent < 0.33 then
                color = Color3.fromRGB(244, 67, 54) -- Red
            elseif percent < 0.66 then
                color = Color3.fromRGB(255, 193, 7) -- Yellow
            else
                color = Color3.fromRGB(76, 175, 80) -- Green
            end
            
            TweenService:Create(progressFill, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                BackgroundColor3 = color
            }):Play()
        end,
        SetMax = function(self, newMax)
            max = newMax
        end
    }
end


function SectionApi:NewTextBoxButton(config)
    local name = tostring(config.Name or "TextBox Button")
    local placeholder = tostring(config.PlaceholderText or "Enter text...")
    local buttonText = tostring(config.ButtonText or "Submit")
    local callback = config.Callback or function() end
    local default = tostring(config.CurrentValue or "")
    local configKey = config.Flag
    if configKey and configData.textboxButtons and configData.textboxButtons[configKey] then 
        default = tostring(configData.textboxButtons[configKey]) 
    end
    
    local tbFrame = Instance.new("Frame")
    tbFrame.Size = UDim2.new(1,-20,0,60)
    tbFrame.Position = UDim2.new(0,10,0, tab.yPos)
    tbFrame.BackgroundColor3 = CurrentTheme.ElementBackground
    tbFrame.BorderSizePixel = 0
    tbFrame.Parent = tab.content
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0,4)
    frameCorner.Parent = tbFrame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,-10,0,20)
    label.Position = UDim2.new(0,5,0,5)
    label.Text = name
    label.TextColor3 = CurrentTheme.TextColor
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.SourceSans
    label.TextSize = 13
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = tbFrame
    
    local textBox = Instance.new("TextBox")
    textBox.Size = UDim2.new(0.65,-5,0,25)
    textBox.Position = UDim2.new(0,5,1,-30)
    textBox.PlaceholderText = placeholder
    textBox.Text = default
    textBox.TextColor3 = CurrentTheme.TextColor
    textBox.PlaceholderColor3 = CurrentTheme.PlaceholderColor
    textBox.BackgroundColor3 = CurrentTheme.InputBackground
    textBox.BorderSizePixel = 0
    textBox.Font = Enum.Font.SourceSans
    textBox.TextSize = 12
    textBox.TextXAlignment = Enum.TextXAlignment.Left
    textBox.ClearTextOnFocus = false
    textBox.Parent = tbFrame
    
    local boxCorner = Instance.new("UICorner")
    boxCorner.CornerRadius = UDim.new(0,4)
    boxCorner.Parent = textBox
    
    local boxStroke = Instance.new("UIStroke")
    boxStroke.Color = CurrentTheme.InputStroke
    boxStroke.Thickness = 1
    boxStroke.Parent = textBox
    
    local submitBtn = Instance.new("TextButton")
    submitBtn.Size = UDim2.new(0.35,-5,0,25)
    submitBtn.Position = UDim2.new(0.65,5,1,-30)
    submitBtn.Text = buttonText
    submitBtn.TextColor3 = Color3.new(1,1,1)
    submitBtn.BackgroundColor3 = Color3.fromRGB(33,150,243)
    submitBtn.Font = Enum.Font.SourceSansBold
    submitBtn.TextSize = 12
    submitBtn.BorderSizePixel = 0
    submitBtn.Parent = tbFrame
    
    addButtonEffects(submitBtn)
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0,4)
    btnCorner.Parent = submitBtn
    
    submitBtn.MouseButton1Click:Connect(function()
        local text = textBox.Text
        if text ~= "" then
            pcall(callback, text)
            if configKey then
                if not configData.textboxButtons then configData.textboxButtons = {} end
                configData.textboxButtons[configKey] = text
                safeWriteFile(configFile, configData)
            end
        end
    end)
    
    -- Also submit on Enter key
    textBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            submitBtn.MouseButton1Click:Fire()
        end
    end)
    
    tab.yPos = tab.yPos + 70
    if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
    
    return {
        GetText = function(self)
            return textBox.Text
        end,
        SetText = function(self, text)
            textBox.Text = tostring(text)
        end
    }
end




function SectionApi:NewNotificationHistory()
    local historyFrame = Instance.new("Frame")
    historyFrame.Size = UDim2.new(1,-20,0,220)
    historyFrame.Position = UDim2.new(0,10,0, tab.yPos)
    historyFrame.BackgroundColor3 = CurrentTheme.ElementBackground
    historyFrame.BorderSizePixel = 0
    historyFrame.Parent = tab.content
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0,4)
    frameCorner.Parent = historyFrame
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1,-10,0,25)
    titleLabel.Position = UDim2.new(0,5,0,5)
    titleLabel.Text = "🔔 Notification History"
    titleLabel.TextColor3 = CurrentTheme.TextColor
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = historyFrame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1,-10,1,-70)
    scrollFrame.Position = UDim2.new(0,5,0,30)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.ScrollBarThickness = 4
    scrollFrame.BorderSizePixel = 0
    scrollFrame.Parent = historyFrame
    
    local function updateHistory()
        scrollFrame:ClearAllChildren()
        local yPos = 0
        
        if #MyHub.NotificationHistory == 0 then
            local emptyLabel = Instance.new("TextLabel")
            emptyLabel.Size = UDim2.new(1,0,0,30)
            emptyLabel.Text = "No notifications yet..."
            emptyLabel.TextColor3 = Color3.fromRGB(150,150,150)
            emptyLabel.BackgroundTransparency = 1
            emptyLabel.Font = Enum.Font.SourceSansItalic
            emptyLabel.TextSize = 12
            emptyLabel.Parent = scrollFrame
        else
            for i, notif in ipairs(MyHub.NotificationHistory) do
                local notifFrame = Instance.new("Frame")
                notifFrame.Size = UDim2.new(1,0,0,45)
                notifFrame.Position = UDim2.new(0,0,0,yPos)
                notifFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)
                notifFrame.BorderSizePixel = 0
                notifFrame.Parent = scrollFrame
                
                local notifCorner = Instance.new("UICorner")
                notifCorner.CornerRadius = UDim.new(0,4)
                notifCorner.Parent = notifFrame
                
                local timeLabel = Instance.new("TextLabel")
                timeLabel.Size = UDim2.new(0,55,1,0)
                timeLabel.Position = UDim2.new(0,5,0,0)
                timeLabel.Text = notif.time
                timeLabel.TextColor3 = Color3.fromRGB(150,150,150)
                timeLabel.BackgroundTransparency = 1
                timeLabel.Font = Enum.Font.SourceSans
                timeLabel.TextSize = 10
                timeLabel.Parent = notifFrame
                
                local titleLabel = Instance.new("TextLabel")
                titleLabel.Size = UDim2.new(1,-65,0.5,0)
                titleLabel.Position = UDim2.new(0,65,0,2)
                titleLabel.Text = notif.title
                titleLabel.TextColor3 = CurrentTheme.TextColor
                titleLabel.BackgroundTransparency = 1
                titleLabel.Font = Enum.Font.SourceSansBold
                titleLabel.TextSize = 11
                titleLabel.TextXAlignment = Enum.TextXAlignment.Left
                titleLabel.TextTruncate = Enum.TextTruncate.AtEnd
                titleLabel.Parent = notifFrame
                
                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1,-65,0.5,0)
                textLabel.Position = UDim2.new(0,65,0.5,0)
                textLabel.Text = notif.text
                textLabel.TextColor3 = Color3.fromRGB(180,180,180)
                textLabel.BackgroundTransparency = 1
                textLabel.Font = Enum.Font.SourceSans
                textLabel.TextSize = 10
                textLabel.TextXAlignment = Enum.TextXAlignment.Left
                textLabel.TextTruncate = Enum.TextTruncate.AtEnd
                textLabel.Parent = notifFrame
                
                yPos = yPos + 50
            end
        end
        
        scrollFrame.CanvasSize = UDim2.new(0,0,0,yPos)
    end
    
    updateHistory()
    
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Size = UDim2.new(1,-10,0,30)
    buttonFrame.Position = UDim2.new(0,5,1,-35)
    buttonFrame.BackgroundTransparency = 1
    buttonFrame.Parent = historyFrame
    
    local refreshBtn = Instance.new("TextButton")
    refreshBtn.Size = UDim2.new(0.48,0,1,0)
    refreshBtn.Position = UDim2.new(0,0,0,0)
    refreshBtn.Text = "🔄 Refresh"
    refreshBtn.TextColor3 = CurrentTheme.TextColor
    refreshBtn.BackgroundColor3 = Color3.fromRGB(76,175,80)
    refreshBtn.Font = Enum.Font.SourceSansBold
    refreshBtn.TextSize = 12
    refreshBtn.BorderSizePixel = 0
    refreshBtn.Parent = buttonFrame
    
    addButtonEffects(refreshBtn)
    
    local refreshCorner = Instance.new("UICorner")
    refreshCorner.CornerRadius = UDim.new(0,4)
    refreshCorner.Parent = refreshBtn
    
    local clearBtn = Instance.new("TextButton")
    clearBtn.Size = UDim2.new(0.48,0,1,0)
    clearBtn.Position = UDim2.new(0.52,0,0,0)
    clearBtn.Text = "🗑️ Clear"
    clearBtn.TextColor3 = CurrentTheme.TextColor
    clearBtn.BackgroundColor3 = Color3.fromRGB(244,67,54)
    clearBtn.Font = Enum.Font.SourceSansBold
    clearBtn.TextSize = 12
    clearBtn.BorderSizePixel = 0
    clearBtn.Parent = buttonFrame
    
    addButtonEffects(clearBtn)
    
    local clearCorner = Instance.new("UICorner")
    clearCorner.CornerRadius = UDim.new(0,4)
    clearCorner.Parent = clearBtn
    
    refreshBtn.MouseButton1Click:Connect(updateHistory)
    clearBtn.MouseButton1Click:Connect(function()
        MyHub.NotificationHistory = {}
        updateHistory()
        MyHub:Notify("History", "Cleared!", 2)
    end)
    
    tab.yPos = tab.yPos + 230
    if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
    
    return {
        Refresh = updateHistory
    }
end

            
            
                function SectionApi:NewColorPicker(config)
    local colorName = tostring(config.Name or "Color Picker")
    local default = config.CurrentValue or Color3.fromRGB(255, 255, 255)
    local callback = config.Callback or function() end
    local configKey = config.Flag
    if configKey and configData.colors and configData.colors[configKey] then
        local saved = configData.colors[configKey]
        default = Color3.fromRGB(saved.R, saved.G, saved.B)
    end
    
    local colorFrame = Instance.new("Frame")
    colorFrame.Size = UDim2.new(1,-20,0,30)
    colorFrame.Position = UDim2.new(0,10,0, tab.yPos)
    colorFrame.BackgroundColor3 = CurrentTheme.ElementBackground
    colorFrame.BorderSizePixel = 0
    colorFrame.Parent = tab.content
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0,4)
    frameCorner.Parent = colorFrame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7,0,1,0)
    label.Text = colorName
    label.TextColor3 = CurrentTheme.TextColor
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.SourceSans
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = colorFrame
    
    local colorPreview = Instance.new("Frame")
    colorPreview.Size = UDim2.new(0, 60, 0, 20)
    colorPreview.Position = UDim2.new(1, -70, 0.5, -10)
    colorPreview.BackgroundColor3 = default
    colorPreview.BorderSizePixel = 0
    colorPreview.Parent = colorFrame
    
    local previewCorner = Instance.new("UICorner")
    previewCorner.CornerRadius = UDim.new(0, 4)
    previewCorner.Parent = colorPreview
    
    local colorBtn = Instance.new("TextButton")
    colorBtn.Size = UDim2.new(1, 0, 1, 0)
    colorBtn.BackgroundTransparency = 1
    colorBtn.Text = ""
    colorBtn.Parent = colorPreview
    
    local pickerOpen = false
    local currentPicker = nil
    
    colorBtn.MouseButton1Click:Connect(function()
        if pickerOpen then return end
        pickerOpen = true
        
        local picker = Instance.new("Frame")
        picker.Size = UDim2.new(0, 200, 0, 240)
        picker.Position = UDim2.new(0, 0, 1, 5)
        picker.BackgroundColor3 = CurrentTheme.Background
        picker.BorderSizePixel = 0
        picker.ZIndex = 100
        picker.Parent = colorFrame
        currentPicker = picker
        
        local pickerCorner = Instance.new("UICorner")
        pickerCorner.CornerRadius = UDim.new(0, 6)
        pickerCorner.Parent = picker
        
        -- Title
        local pickerTitle = Instance.new("TextLabel")
        pickerTitle.Size = UDim2.new(1, 0, 0, 25)
        pickerTitle.Text = "🎨 " .. colorName
        pickerTitle.TextColor3 = CurrentTheme.TextColor
        pickerTitle.BackgroundTransparency = 1
        pickerTitle.Font = Enum.Font.SourceSansBold
        pickerTitle.TextSize = 12
        pickerTitle.Parent = picker
        
        local currentColor = default
        local r, g, b = math.floor(currentColor.R * 255), math.floor(currentColor.G * 255), math.floor(currentColor.B * 255)
        
        local function createColorSlider(name, yPos, defaultVal, color)
            local sliderLabel = Instance.new("TextLabel")
            sliderLabel.Size = UDim2.new(1, -10, 0, 20)
            sliderLabel.Position = UDim2.new(0, 5, 0, yPos)
            sliderLabel.Text = name .. ": " .. defaultVal
            sliderLabel.TextColor3 = CurrentTheme.TextColor
            sliderLabel.BackgroundTransparency = 1
            sliderLabel.Font = Enum.Font.SourceSans
            sliderLabel.TextSize = 12
            sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            sliderLabel.Parent = picker
            
            local sliderBg = Instance.new("Frame")
            sliderBg.Size = UDim2.new(1, -10, 0, 8)
            sliderBg.Position = UDim2.new(0, 5, 0, yPos + 20)
            sliderBg.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            sliderBg.BorderSizePixel = 0
            sliderBg.Parent = picker
            
            local sliderCorner = Instance.new("UICorner")
            sliderCorner.CornerRadius = UDim.new(1, 0)
            sliderCorner.Parent = sliderBg
            
            local sliderFill = Instance.new("Frame")
            sliderFill.Size = UDim2.new(defaultVal / 255, 0, 1, 0)
            sliderFill.BackgroundColor3 = color
            sliderFill.BorderSizePixel = 0
            sliderFill.Parent = sliderBg
            
            local fillCorner = Instance.new("UICorner")
            fillCorner.CornerRadius = UDim.new(1, 0)
            fillCorner.Parent = sliderFill
            
            return sliderLabel, sliderBg, sliderFill
        end
        
        local rLabel, rBg, rFill = createColorSlider("R", 35, r, Color3.fromRGB(255, 0, 0))
        local gLabel, gBg, gFill = createColorSlider("G", 80, g, Color3.fromRGB(0, 255, 0))
        local bLabel, bBg, bFill = createColorSlider("B", 125, b, Color3.fromRGB(0, 0, 255))
        
        local function updateColor()
            local newColor = Color3.fromRGB(r, g, b)
            colorPreview.BackgroundColor3 = newColor
            pcall(callback, newColor)
            if configKey then
                if not configData.colors then configData.colors = {} end
                configData.colors[configKey] = {R = r, G = g, B = b}
                safeWriteFile(configFile, configData)
            end
        end
        
        local function makeColorSlider(bg, fill, label, name, getValue, setValue)
            local dragging = false
            
            local function update(input)
                if not dragging then return end
                local rel = math.clamp((input.Position.X - bg.AbsolutePosition.X) / bg.AbsoluteSize.X, 0, 1)
                local val = math.floor(rel * 255)
                setValue(val)
                fill.Size = UDim2.new(rel, 0, 1, 0)
                label.Text = name .. ": " .. val
                updateColor()
            end
            
            bg.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    update(input)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    update(input)
                end
            end)
        end
        
        makeColorSlider(rBg, rFill, rLabel, "R", function() return r end, function(v) r = v end)
        makeColorSlider(gBg, gFill, gLabel, "G", function() return g end, function(v) g = v end)
        makeColorSlider(bBg, bFill, bLabel, "B", function() return b end, function(v) b = v end)
        
        -- Buttons Frame
        local buttonFrame = Instance.new("Frame")
        buttonFrame.Size = UDim2.new(1, -10, 0, 30)
        buttonFrame.Position = UDim2.new(0, 5, 1, -35)
        buttonFrame.BackgroundTransparency = 1
        buttonFrame.Parent = picker
        
        -- Done Button
        local doneBtn = Instance.new("TextButton")
        doneBtn.Size = UDim2.new(0.48, 0, 1, 0)
        doneBtn.Position = UDim2.new(0, 0, 0, 0)
        doneBtn.Text = "✅ Done"
        doneBtn.TextColor3 = Color3.new(1, 1, 1)
        doneBtn.BackgroundColor3 = Color3.fromRGB(52, 199, 89)
        doneBtn.Font = Enum.Font.SourceSansBold
        doneBtn.TextSize = 14
        doneBtn.BorderSizePixel = 0
        doneBtn.Parent = buttonFrame
        
        local doneCorner = Instance.new("UICorner")
        doneCorner.CornerRadius = UDim.new(0, 4)
        doneCorner.Parent = doneBtn
        
        addButtonEffects(doneBtn)
        
        -- Cancel Button
        local cancelBtn = Instance.new("TextButton")
        cancelBtn.Size = UDim2.new(0.48, 0, 1, 0)
        cancelBtn.Position = UDim2.new(0.52, 0, 0, 0)
        cancelBtn.Text = "❌ Cancel"
        cancelBtn.TextColor3 = Color3.new(1, 1, 1)
        cancelBtn.BackgroundColor3 = Color3.fromRGB(244, 67, 54)
        cancelBtn.Font = Enum.Font.SourceSansBold
        cancelBtn.TextSize = 14
        cancelBtn.BorderSizePixel = 0
        cancelBtn.Parent = buttonFrame
        
        local cancelCorner = Instance.new("UICorner")
        cancelCorner.CornerRadius = UDim.new(0, 4)
        cancelCorner.Parent = cancelBtn
        
        addButtonEffects(cancelBtn)
        
        doneBtn.MouseButton1Click:Connect(function()
            picker:Destroy()
            pickerOpen = false
            currentPicker = nil
            MyHub:Notify("Color", "Color saved!", 2)
        end)
        
        cancelBtn.MouseButton1Click:Connect(function()
            colorPreview.BackgroundColor3 = default
            picker:Destroy()
            pickerOpen = false
            currentPicker = nil
            MyHub:Notify("Color", "Cancelled", 2)
        end)
    end)
    
    tab.yPos = tab.yPos + 40
    if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
    return colorFrame
end
                    
                        
                        
                    
                    
            
            function SectionApi:NewLabel(config)
                local labelText = tostring(config.Name or "Label")
                
                local labelFrame = Instance.new("Frame")
                labelFrame.Size = UDim2.new(1,-20,0,25)
                labelFrame.Position = UDim2.new(0,10,0, tab.yPos)
                labelFrame.BackgroundColor3 = CurrentTheme.ElementBackground
                labelFrame.BorderSizePixel = 0
                labelFrame.Parent = tab.content
                
                local frameCorner = Instance.new("UICorner")
                frameCorner.CornerRadius = UDim.new(0,4)
                frameCorner.Parent = labelFrame
                
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1,-10,1,0)
                label.Position = UDim2.new(0,5,0,0)
                label.Text = labelText
                label.TextColor3 = CurrentTheme.TextColor
                label.BackgroundTransparency = 1
                label.Font = Enum.Font.SourceSans
                label.TextSize = 13
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.TextWrapped = true
                label.Parent = labelFrame
                
                tab.yPos = tab.yPos + 30
                if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
                
                return {
                    SetText = function(self, text)
                        label.Text = tostring(text)
                    end
                }
            end
            
            function SectionApi:NewParagraph(config)
                local title = tostring(config.Title or "Paragraph")
                local content = tostring(config.Content or "")
                
                local paraFrame = Instance.new("Frame")
                paraFrame.Size = UDim2.new(1,-20,0,80)
                paraFrame.Position = UDim2.new(0,10,0, tab.yPos)
                paraFrame.BackgroundColor3 = CurrentTheme.ElementBackground
                paraFrame.BorderSizePixel = 0
                paraFrame.Parent = tab.content
                
                local frameCorner = Instance.new("UICorner")
                frameCorner.CornerRadius = UDim.new(0,4)
                frameCorner.Parent = paraFrame
                
                local titleLabel = Instance.new("TextLabel")
                titleLabel.Size = UDim2.new(1,-10,0,20)
                titleLabel.Position = UDim2.new(0,5,0,5)
                titleLabel.Text = title
                titleLabel.TextColor3 = CurrentTheme.TextColor
                titleLabel.BackgroundTransparency = 1
                titleLabel.Font = Enum.Font.SourceSansBold
                titleLabel.TextSize = 14
                titleLabel.TextXAlignment = Enum.TextXAlignment.Left
                titleLabel.Parent = paraFrame
                
                local contentLabel = Instance.new("TextLabel")
                contentLabel.Size = UDim2.new(1,-10,1,-30)
                contentLabel.Position = UDim2.new(0,5,0,25)
                contentLabel.Text = content
                contentLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
                contentLabel.BackgroundTransparency = 1
                contentLabel.Font = Enum.Font.SourceSans
                contentLabel.TextSize = 12
                contentLabel.TextXAlignment = Enum.TextXAlignment.Left
                contentLabel.TextYAlignment = Enum.TextYAlignment.Top
                contentLabel.TextWrapped = true
                contentLabel.Parent = paraFrame
                
                tab.yPos = tab.yPos + 90
                if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
                
                return {
                    SetTitle = function(self, text)
                        titleLabel.Text = tostring(text)
                    end,
                    SetContent = function(self, text)
                        contentLabel.Text = tostring(text)
                    end
                }
            end

function SectionApi:NewRemoteHook(config)
    local remoteName = tostring(config.RemoteName or "Remote")
    local defaultValue = config.DefaultValue or 999
    local callback = config.Callback or function() end
    
    local hookFrame = Instance.new("Frame")
    hookFrame.Size = UDim2.new(1,-20,0,90)
    hookFrame.Position = UDim2.new(0,10,0, tab.yPos)
    hookFrame.BackgroundColor3 = CurrentTheme.ElementBackground
    hookFrame.BorderSizePixel = 0
    hookFrame.Parent = tab.content
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0,4)
    frameCorner.Parent = hookFrame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,-10,0,20)
    label.Position = UDim2.new(0.25,0,0,5)
    label.Text = "Hook: " .. remoteName
    label.TextColor3 = CurrentTheme.TextColor
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 13
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = hookFrame
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1,-10,0,15)
    statusLabel.Position = UDim2.new(0,5,0,25)
    statusLabel.Text = "Status: Inactive | Calls: 0"
    statusLabel.TextColor3 = Color3.fromRGB(150,150,150)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.TextSize = 11
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.Parent = hookFrame
    
    local valueInput = Instance.new("TextBox")
    valueInput.Size = UDim2.new(0.4,0,0,25)
    valueInput.Position = UDim2.new(0,5,0,45)
    valueInput.Text = tostring(defaultValue)
    valueInput.PlaceholderText = "Value..."
    valueInput.TextColor3 = CurrentTheme.TextColor
    valueInput.PlaceholderColor3 = CurrentTheme.PlaceholderColor
    valueInput.BackgroundColor3 = CurrentTheme.InputBackground
    valueInput.BorderSizePixel = 0
    valueInput.Font = Enum.Font.SourceSans
    valueInput.TextSize = 12
    valueInput.Parent = hookFrame
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0,4)
    inputCorner.Parent = valueInput
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Size = UDim2.new(0.28,-2.5,0,25)
    toggleBtn.Position = UDim2.new(0.41,2.5,0,45)
    toggleBtn.Text = "Enable"
    toggleBtn.TextColor3 = Color3.new(1,1,1)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(76,175,80)
    toggleBtn.Font = Enum.Font.SourceSansBold
    toggleBtn.TextSize = 12
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Parent = hookFrame
    
    addButtonEffects(toggleBtn)
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0,4)
    toggleCorner.Parent = toggleBtn
    
    local logBtn = Instance.new("TextButton")
    logBtn.Size = UDim2.new(0.28,-2.5,0,25)
    toggleBtn.Position = UDim2.new(0.72,2.5,0,45)
    logBtn.Text = "Log"
    logBtn.TextColor3 = Color3.new(1,1,1)
    logBtn.BackgroundColor3 = Color3.fromRGB(33,150,243)
    logBtn.Font = Enum.Font.SourceSansBold
    logBtn.TextSize = 12
    logBtn.BorderSizePixel = 0
    logBtn.Parent = hookFrame
    
    addButtonEffects(logBtn)
    
    local logCorner = Instance.new("UICorner")
    logCorner.CornerRadius = UDim.new(0,4)
    logCorner.Parent = logBtn
    
    local hooked = false
    local callCount = 0
    local hookConnection = nil
    local callLog = {}
    
    toggleBtn.MouseButton1Click:Connect(function()
        hooked = not hooked
        
        if hooked then
            toggleBtn.Text = "Disable"
            toggleBtn.BackgroundColor3 = Color3.fromRGB(244,67,54)
            statusLabel.Text = "Status: ✅ Active | Calls: " .. callCount
            statusLabel.TextColor3 = Color3.fromRGB(76,175,80)
            
            local forceValue = tonumber(valueInput.Text) or defaultValue
            
            -- Create hook
            if not _G.MyHubHooks then _G.MyHubHooks = {} end
            
            local oldNamecall
            oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
                local method = getnamecallmethod()
                local args = {...}
                
                if (method == "FireServer" or method == "InvokeServer") and self.Name == remoteName then
                    callCount = callCount + 1
                    statusLabel.Text = "Status: ✅ Active | Calls: " .. callCount
                    
                    local originalValue = args[1]
                    args[1] = forceValue
                    
                    table.insert(callLog, 1, {
                        Time = os.date("%H:%M:%S"),
                        Original = tostring(originalValue),
                        Forced = tostring(forceValue)
                    })
                    if #callLog > 20 then table.remove(callLog) end
                    
                    print("🪝", remoteName, "| Original:", originalValue, "→ Forced:", forceValue)
                end
                
                return oldNamecall(self, unpack(args))
            end)
            
            _G.MyHubHooks[remoteName] = oldNamecall
            hookConnection = oldNamecall
            
            pcall(callback, true, forceValue)
            MyHub:Notify("Hook Active", remoteName .. " = " .. forceValue, 2)
        else
            toggleBtn.Text = "Enable"
            toggleBtn.BackgroundColor3 = Color3.fromRGB(76,175,80)
            statusLabel.Text = "Status: Inactive | Calls: " .. callCount
            statusLabel.TextColor3 = Color3.fromRGB(150,150,150)
            
            if hookConnection and _G.MyHubHooks and _G.MyHubHooks[remoteName] then
                hookmetamethod(game, "__namecall", _G.MyHubHooks[remoteName])
                _G.MyHubHooks[remoteName] = nil
            end
            
            pcall(callback, false)
            MyHub:Notify("Hook Disabled", remoteName, 2)
        end
    end)
    
    logBtn.MouseButton1Click:Connect(function()
        if #callLog == 0 then
            MyHub:Notify("Log Empty", "No calls recorded yet", 2)
        else
            local logText = ""
            for i = 1, math.min(5, #callLog) do
                logText = logText .. callLog[i].Time .. ": " .. callLog[i].Original .. " → " .. callLog[i].Forced .. "\n"
            end
            MyHub:Notify("Recent Calls", logText, 5)
        end
    end)
    
    tab.yPos = tab.yPos + 100
    if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
    
    return {
        SetValue = function(self, value)
            valueInput.Text = tostring(value)
        end,
        GetCallCount = function(self)
            return callCount
        end,
        GetLog = function(self)
            return callLog
        end
    }
end

function SectionApi:NewRemoteLogger()
    local loggerFrame = Instance.new("Frame")
    loggerFrame.Size = UDim2.new(1,-20,0,250)
    loggerFrame.Position = UDim2.new(0,10,0, tab.yPos)
    loggerFrame.BackgroundColor3 = CurrentTheme.ElementBackground
    loggerFrame.BorderSizePixel = 0
    loggerFrame.Parent = tab.content
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0,4)
    frameCorner.Parent = loggerFrame
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1,-10,0,25)
    titleLabel.Position = UDim2.new(0,5,0,5)
    titleLabel.Text = "📡 Remote Event Logger"
    titleLabel.TextColor3 = CurrentTheme.TextColor
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = loggerFrame
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1,-10,0,20)
    statusLabel.Position = UDim2.new(0,5,0,30)
    statusLabel.Text = "Status: Inactive | Total: 0"
    statusLabel.TextColor3 = Color3.fromRGB(150,150,150)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.TextSize = 11
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.Parent = loggerFrame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1,-10,1,-100)
    scrollFrame.Position = UDim2.new(0,5,0,55)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.ScrollBarThickness = 4
    scrollFrame.BorderSizePixel = 0
    scrollFrame.Parent = loggerFrame
    
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Size = UDim2.new(1,-10,0,30)
    buttonFrame.Position = UDim2.new(0,5,1,-35)
    buttonFrame.BackgroundTransparency = 1
    buttonFrame.Parent = loggerFrame
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Size = UDim2.new(0.32,0,1,0)
    toggleBtn.Position = UDim2.new(0,0,0,0)
    toggleBtn.Text = "Start"
    toggleBtn.TextColor3 = Color3.new(1,1,1)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(76,175,80)
    toggleBtn.Font = Enum.Font.SourceSansBold
    toggleBtn.TextSize = 12
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Parent = buttonFrame
    
    addButtonEffects(toggleBtn)
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0,4)
    toggleCorner.Parent = toggleBtn
    
    local clearBtn = Instance.new("TextButton")
    clearBtn.Size = UDim2.new(0.32,0,1,0)
    clearBtn.Position = UDim2.new(0.34,0,0,0)
    clearBtn.Text = "Clear"
    clearBtn.TextColor3 = Color3.new(1,1,1)
    clearBtn.BackgroundColor3 = Color3.fromRGB(255,152,0)
    clearBtn.Font = Enum.Font.SourceSansBold
    clearBtn.TextSize = 12
    clearBtn.BorderSizePixel = 0
    clearBtn.Parent = buttonFrame
    
    addButtonEffects(clearBtn)
    
    local clearCorner = Instance.new("UICorner")
    clearCorner.CornerRadius = UDim.new(0,4)
    clearCorner.Parent = clearBtn
    
    local saveBtn = Instance.new("TextButton")
    saveBtn.Size = UDim2.new(0.32,0,1,0)
    saveBtn.Position = UDim2.new(0.68,0,0,0)
    saveBtn.Text = "Save"
    saveBtn.TextColor3 = Color3.new(1,1,1)
    saveBtn.BackgroundColor3 = Color3.fromRGB(33,150,243)
    saveBtn.Font = Enum.Font.SourceSansBold
    saveBtn.TextSize = 12
    saveBtn.BorderSizePixel = 0
    saveBtn.Parent = buttonFrame
    
    addButtonEffects(saveBtn)
    
    local saveCorner = Instance.new("UICorner")
    saveCorner.CornerRadius = UDim.new(0,4)
    saveCorner.Parent = saveBtn
    
    local logging = false
    local totalCalls = 0
    local remoteLogs = {}
    local hookConnection = nil
    
    local function updateDisplay()
        scrollFrame:ClearAllChildren()
        local yPos = 0
        
        for i = 1, math.min(20, #remoteLogs) do
            local log = remoteLogs[i]
            
            local logFrame = Instance.new("Frame")
            logFrame.Size = UDim2.new(1,0,0,50)
            logFrame.Position = UDim2.new(0,0,0,yPos)
            logFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)
            logFrame.BorderSizePixel = 0
            logFrame.Parent = scrollFrame
            
            local logCorner = Instance.new("UICorner")
            logCorner.CornerRadius = UDim.new(0,4)
            logCorner.Parent = logFrame
            
            local timeLabel = Instance.new("TextLabel")
            timeLabel.Size = UDim2.new(0,55,0,15)
            timeLabel.Position = UDim2.new(0,5,0,5)
            timeLabel.Text = log.Time
            timeLabel.TextColor3 = Color3.fromRGB(150,150,150)
            timeLabel.BackgroundTransparency = 1
            timeLabel.Font = Enum.Font.SourceSans
            timeLabel.TextSize = 10
            timeLabel.Parent = logFrame
            
            local remoteLabel = Instance.new("TextLabel")
            remoteLabel.Size = UDim2.new(1,-65,0,20)
            remoteLabel.Position = UDim2.new(0,65,0,2)
            remoteLabel.Text = "📡 " .. log.Remote
            remoteLabel.TextColor3 = CurrentTheme.TextColor
            remoteLabel.BackgroundTransparency = 1
            remoteLabel.Font = Enum.Font.SourceSansBold
            remoteLabel.TextSize = 11
            remoteLabel.TextXAlignment = Enum.TextXAlignment.Left
            remoteLabel.TextTruncate = Enum.TextTruncate.AtEnd
            remoteLabel.Parent = logFrame
            
            local argsLabel = Instance.new("TextLabel")
            argsLabel.Size = UDim2.new(1,-10,0,25)
            argsLabel.Position = UDim2.new(0,5,0,23)
            argsLabel.Text = "Args: " .. log.Args
            argsLabel.TextColor3 = Color3.fromRGB(180,180,180)
            argsLabel.BackgroundTransparency = 1
            argsLabel.Font = Enum.Font.SourceSans
            argsLabel.TextSize = 10
            argsLabel.TextXAlignment = Enum.TextXAlignment.Left
            argsLabel.TextTruncate = Enum.TextTruncate.AtEnd
            argsLabel.Parent = logFrame
            
            yPos = yPos + 55
        end
        
        scrollFrame.CanvasSize = UDim2.new(0,0,0,yPos)
    end
    
    toggleBtn.MouseButton1Click:Connect(function()
        logging = not logging
        
        if logging then
            toggleBtn.Text = "Stop"
            toggleBtn.BackgroundColor3 = Color3.fromRGB(244,67,54)
            statusLabel.Text = "Status: 🔴 Recording | Total: " .. totalCalls
            statusLabel.TextColor3 = Color3.fromRGB(244,67,54)
            
            if not _G.MyHubLogger then
                local oldNamecall
                oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
                    local method = getnamecallmethod()
                    local args = {...}
                    
                    if logging and (method == "FireServer" or method == "InvokeServer") then
                        totalCalls = totalCalls + 1
                        statusLabel.Text = "Status: 🔴 Recording | Total: " .. totalCalls
                        
                        local argsStr = ""
                        for i, arg in ipairs(args) do
                            argsStr = argsStr .. tostring(arg) .. (i < #args and ", " or "")
                        end
                        
                        table.insert(remoteLogs, 1, {
                            Time = os.date("%H:%M:%S"),
                            Remote = self.Name,
                            Method = method,
                            Args = argsStr
                        })
                        
                        if #remoteLogs > 100 then table.remove(remoteLogs) end
                        
                        updateDisplay()
                    end
                    
                    return oldNamecall(self, unpack(args))
                end)
                
                _G.MyHubLogger = oldNamecall
                hookConnection = oldNamecall
            end
            
            MyHub:Notify("Logger", "Started recording remotes", 2)
        else
            toggleBtn.Text = "Start"
            toggleBtn.BackgroundColor3 = Color3.fromRGB(76,175,80)
            statusLabel.Text = "Status: Inactive | Total: " .. totalCalls
            statusLabel.TextColor3 = Color3.fromRGB(150,150,150)
            
            MyHub:Notify("Logger", "Stopped recording", 2)
        end
    end)
    
    clearBtn.MouseButton1Click:Connect(function()
        remoteLogs = {}
        totalCalls = 0
        statusLabel.Text = "Status: " .. (logging and "🔴 Recording" or "Inactive") .. " | Total: 0"
        updateDisplay()
        MyHub:Notify("Logger", "Cleared all logs", 2)
    end)
    
    saveBtn.MouseButton1Click:Connect(function()
        if #remoteLogs > 0 then
            local json = HttpService:JSONEncode(remoteLogs)
            writefile("remote_log_" .. os.date("%Y%m%d_%H%M%S") .. ".json", json)
            MyHub:Notify("Saved", "Log saved with " .. #remoteLogs .. " entries", 3)
        else
            MyHub:Notify("Error", "No logs to save", 2)
        end
    end)
    
    tab.yPos = tab.yPos + 260
    if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
    
    return {
        Clear = function(self)
            remoteLogs = {}
            totalCalls = 0
            updateDisplay()
        end,
        GetLogs = function(self)
            return remoteLogs
        end
    }
end
            
            function SectionApi:NewInput(config)
                local inputName = tostring(config.Name or "Input")
                local default = tostring(config.CurrentValue or "")
                local placeholderText = tostring(config.PlaceholderText or "Enter text...")
                local callback = config.Callback or function() end
                local configKey = config.Flag
                if configKey and configData.inputs[configKey] then default = tostring(configData.inputs[configKey]) end
                
                local inputFrame = Instance.new("Frame")
                inputFrame.Size = UDim2.new(1,-20,0,30)
                inputFrame.Position = UDim2.new(0,10,0, tab.yPos)
                inputFrame.BackgroundColor3 = CurrentTheme.ElementBackground
                inputFrame.BorderSizePixel = 0
                inputFrame.Parent = tab.content
                
                local frameCorner = Instance.new("UICorner")
                frameCorner.CornerRadius = UDim.new(0,4)
                frameCorner.Parent = inputFrame
                
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1,0,0.5,0)
                label.Text = inputName
                label.TextColor3 = CurrentTheme.TextColor
                label.BackgroundTransparency = 1
                label.Font = Enum.Font.SourceSans
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = inputFrame
                
                local inputBox = Instance.new("TextBox")
                inputBox.Size = UDim2.new(1,0,0.5,0)
                inputBox.Position = UDim2.new(0,0,0.5,0)
                inputBox.Text = default
                inputBox.PlaceholderText = placeholderText
                inputBox.TextColor3 = CurrentTheme.TextColor
                inputBox.PlaceholderColor3 = CurrentTheme.PlaceholderColor
                inputBox.BackgroundColor3 = CurrentTheme.InputBackground
                inputBox.BorderSizePixel = 0
                inputBox.Font = Enum.Font.SourceSans
                inputBox.TextSize = 14
                inputBox.TextXAlignment = Enum.TextXAlignment.Left
                inputBox.ClearTextOnFocus = false
                inputBox.Parent = inputFrame
                
                local boxCorner = Instance.new("UICorner")
                boxCorner.CornerRadius = UDim.new(0,4)
                boxCorner.Parent = inputBox
                
                local boxStroke = Instance.new("UIStroke")
                boxStroke.Color = CurrentTheme.InputStroke
                boxStroke.Thickness = 1
                boxStroke.Parent = inputBox
                
                inputBox.FocusLost:Connect(function(enterPressed)
                    pcall(callback, inputBox.Text, enterPressed)
                    if configKey then configData.inputs[configKey] = inputBox.Text; safeWriteFile(configFile, configData) end
                end)
                
                inputBox:GetPropertyChangedSignal("Text"):Connect(function()
                    pcall(callback, inputBox.Text, false)
                end)
                
                tab.yPos = tab.yPos + 40
                if activeTab == tab then contentFrame.CanvasSize = UDim2.new(0,0,0, math.max(tab.yPos, 200)) end
                return inputBox
            end
            
            return SectionApi
        end
        
        return TabApi
    end
    
    function WindowApi:SetTheme(themeName)
        CurrentTheme = Themes[tostring(themeName)] or Themes.Default
        ApplyTheme(WindowApi)
    end
    
    return WindowApi
end

return MyHub
