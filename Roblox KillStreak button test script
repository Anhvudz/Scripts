


local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

local function loadMyHub()
    local success, result = pcall(function()
        return loadstring(game:HttpGet('https://raw.githubusercontent.com/Anhvudz/Scripts/main/My%20hub%20script'))()
    end)
    if not success or not result then
        warn("Failed to load MyHub library. Check URL or network.")
        warn("Error:", result)
        return nil
    end
    return result
end

spawn(function()
    wait(1)
    
    local MyHub = loadMyHub()
    if not MyHub then 
        warn("MyHub failed to load!")
        return 
    end
    
    print("‚úÖ MyHub loaded successfully!")
    
    local Window = MyHub:CreateWindow({
        Name = "FAKE EXPLOITE HUB 100%%%%%",
        LoadingTitle = "Loading HUB...",
        LoadingSubtitle = "With CARD Features!"
    })
    
    if not Window then
        warn("Window creation failed!")
        return
    end

-- ============ TOOL HITBOX EXPANDER ============
local HitboxTab = Window:NewTab({Name = "Hitbox"})
local HitboxSection = HitboxTab:NewSection({Name = "Tool Hitbox Expander"})

-- Store original sizes
_G.OriginalHitboxSizes = _G.OriginalHitboxSizes or {}

-- Size settings
local hitboxSizeX = 5
local hitboxSizeY = 5
local hitboxSizeZ = 5

-- Size inputs
HitboxSection:NewTextBoxButton({
    Name = "Size X",
    PlaceholderText = "5",
    ButtonText = "Set",
    CurrentValue = "5",
    Flag = "HitboxX",
    Callback = function(text)
        hitboxSizeX = tonumber(text) or 5
        MyHub:Notify("Hitbox X", "Set to: " .. hitboxSizeX, 2)
    end,
})

HitboxSection:NewTextBoxButton({
    Name = "Size Y",
    PlaceholderText = "5",
    ButtonText = "Set",
    CurrentValue = "5",
    Flag = "HitboxY",
    Callback = function(text)
        hitboxSizeY = tonumber(text) or 5
        MyHub:Notify("Hitbox Y", "Set to: " .. hitboxSizeY, 2)
    end,
})

HitboxSection:NewTextBoxButton({
    Name = "Size Z",
    PlaceholderText = "5",
    ButtonText = "Set",
    CurrentValue = "5",
    Flag = "HitboxZ",
    Callback = function(text)
        hitboxSizeZ = tonumber(text) or 5
        MyHub:Notify("Hitbox Z", "Set to: " .. hitboxSizeZ, 2)
    end,
})

-- Quick presets
local PresetSection = HitboxTab:NewSection({Name = "Quick Presets"})

PresetSection:NewButton({
    Name = "Small (5x5x5)",
    Callback = function()
        hitboxSizeX, hitboxSizeY, hitboxSizeZ = 5, 5, 5
        MyHub:Notify("Preset", "Small hitbox selected", 2)
    end,
})

PresetSection:NewButton({
    Name = "Medium (10x10x10)",
    Callback = function()
        hitboxSizeX, hitboxSizeY, hitboxSizeZ = 10, 10, 10
        MyHub:Notify("Preset", "Medium hitbox selected", 2)
    end,
})

PresetSection:NewButton({
    Name = "Large (20x20x20)",
    Callback = function()
        hitboxSizeX, hitboxSizeY, hitboxSizeZ = 20, 20, 20
        MyHub:Notify("Preset", "Large hitbox selected", 2)
    end,
})

PresetSection:NewButton({
    Name = "Massive (50x50x50)",
    Callback = function()
        hitboxSizeX, hitboxSizeY, hitboxSizeZ = 50, 50, 50
        MyHub:Notify("Preset", "Massive hitbox selected", 2)
    end,
})

-- Main functionality
local ControlSection = HitboxTab:NewSection({Name = "Controls"})

-- Function to expand hitbox
local function expandToolHitbox(tool)
    if not tool then return false end
    
    -- Find handle or hitbox part
    local hitboxPart = tool:FindFirstChild("Hitbox") or tool:FindFirstChild("Handle") or tool:FindFirstChild("HitPart")
    
    -- Try to find any BasePart
    if not hitboxPart then
        for _, child in ipairs(tool:GetDescendants()) do
            if child:IsA("BasePart") and child.Name:lower():find("hit") or child.Name:lower():find("handle") then
                hitboxPart = child
                break
            end
        end
    end
    
    -- If still not found, use first BasePart
    if not hitboxPart then
        hitboxPart = tool:FindFirstChildOfClass("BasePart")
    end
    
    if not hitboxPart then
        return false
    end
    
    -- Save original size
    if not _G.OriginalHitboxSizes[hitboxPart] then
        _G.OriginalHitboxSizes[hitboxPart] = {
            Size = hitboxPart.Size,
            CanCollide = hitboxPart.CanCollide,
            Massless = hitboxPart.Massless,
            Transparency = hitboxPart.Transparency
        }
    end
    
    -- Apply new size
    hitboxPart.Size = Vector3.new(hitboxSizeX, hitboxSizeY, hitboxSizeZ)
    hitboxPart.CanCollide = false
    hitboxPart.Massless = true
    hitboxPart.Transparency = 0.5  -- Semi-transparent so you can see it
    
    print("‚úÖ Expanded hitbox:", hitboxPart.Name, "to", hitboxPart.Size)
    return true
end

-- Function to restore hitbox
local function restoreToolHitbox(tool)
    if not tool then return false end
    
    local hitboxPart = tool:FindFirstChild("Hitbox") or tool:FindFirstChild("Handle") or tool:FindFirstChild("HitPart")
    
    if not hitboxPart then
        for _, child in ipairs(tool:GetDescendants()) do
            if child:IsA("BasePart") and _G.OriginalHitboxSizes[child] then
                hitboxPart = child
                break
            end
        end
    end
    
    if hitboxPart and _G.OriginalHitboxSizes[hitboxPart] then
        local original = _G.OriginalHitboxSizes[hitboxPart]
        hitboxPart.Size = original.Size
        hitboxPart.CanCollide = original.CanCollide
        hitboxPart.Massless = original.Massless
        hitboxPart.Transparency = original.Transparency
        
        _G.OriginalHitboxSizes[hitboxPart] = nil
        
        print("‚úÖ Restored hitbox:", hitboxPart.Name)
        return true
    end
    
    return false
end

-- Apply to current tool
ControlSection:NewButton({
    Name = "üî® Expand Current Tool",
    Callback = function()
        local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
        
        if tool then
            local success = expandToolHitbox(tool)
            if success then
                MyHub:Notify("Hitbox", "Expanded: " .. tool.Name, 2)
            else
                MyHub:Notify("Error", "No hitbox part found!", 3)
            end
        else
            MyHub:Notify("Error", "No tool equipped!", 2)
        end
    end,
})

ControlSection:NewButton({
    Name = "‚Ü©Ô∏è Restore Current Tool",
    Callback = function()
        local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
        
        if tool then
            local success = restoreToolHitbox(tool)
            if success then
                MyHub:Notify("Hitbox", "Restored: " .. tool.Name, 2)
            else
                MyHub:Notify("Error", "Nothing to restore!", 2)
            end
        else
            MyHub:Notify("Error", "No tool equipped!", 2)
        end
    end,
})

-- Auto-expand toggle
ControlSection:NewToggle({
    Name = "Auto-Expand Tools",
    CurrentValue = false,
    Flag = "AutoExpandTools",
    Callback = function(Value)
        _G.AutoExpandTools = Value
        
        if Value then
            -- Expand current tool
            local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
            if tool then
                expandToolHitbox(tool)
            end
            
            MyHub:Notify("Auto-Expand", "Enabled! Equip tools to expand", 3)
        else
            MyHub:Notify("Auto-Expand", "Disabled", 2)
        end
    end,
})

-- Monitor tool equips
player.Character.ChildAdded:Connect(function(child)
    if _G.AutoExpandTools and child:IsA("Tool") then
        wait(0.1)  -- Small delay to ensure tool is fully loaded
        expandToolHitbox(child)
        MyHub:Notify("Auto-Expand", "Expanded: " .. child.Name, 2)
    end
end)

-- Handle character respawns
player.CharacterAdded:Connect(function(character)
    character.ChildAdded:Connect(function(child)
        if _G.AutoExpandTools and child:IsA("Tool") then
            wait(0.1)
            expandToolHitbox(child)
            MyHub:Notify("Auto-Expand", "Expanded: " .. child.Name, 2)
        end
    end)
end)

-- Expand all tools in backpack
ControlSection:NewButton({
    Name = "üì¶ Expand All Backpack Tools",
    Callback = function()
        local count = 0
        
        for _, tool in ipairs(player.Backpack:GetChildren()) do
            if tool:IsA("Tool") then
                if expandToolHitbox(tool) then
                    count = count + 1
                end
            end
        end
        
        MyHub:Notify("Backpack", "Expanded " .. count .. " tools", 2)
    end,
})

ControlSection:NewButton({
    Name = "üîÑ Restore All Tools",
    Callback = function()
        local count = 0
        
        -- Restore equipped tool
        local equippedTool = player.Character and player.Character:FindFirstChildOfClass("Tool")
        if equippedTool and restoreToolHitbox(equippedTool) then
            count = count + 1
        end
        
        -- Restore backpack tools
        for _, tool in ipairs(player.Backpack:GetChildren()) do
            if tool:IsA("Tool") and restoreToolHitbox(tool) then
                count = count + 1
            end
        end
        
        MyHub:Notify("Restore", "Restored " .. count .. " tools", 2)
    end,
})

-- Visual options
local VisualSection = HitboxTab:NewSection({Name = "Visual Options"})

VisualSection:NewToggle({
    Name = "Show Hitbox (Transparent)",
    CurrentValue = true,
    Flag = "ShowHitbox",
    Callback = function(Value)
        _G.ShowHitbox = Value
        
        local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
        if tool then
            local hitboxPart = tool:FindFirstChild("Hitbox") or tool:FindFirstChild("Handle") or tool:FindFirstChildOfClass("BasePart")
            if hitboxPart then
                hitboxPart.Transparency = Value and 0.5 or 0
            end
        end
    end,
})

VisualSection:NewToggle({
    Name = "Highlight Hitbox",
    CurrentValue = false,
    Flag = "HighlightHitbox",
    Callback = function(Value)
        _G.HighlightHitbox = Value
        
        local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
        if tool then
            local hitboxPart = tool:FindFirstChild("Hitbox") or tool:FindFirstChild("Handle") or tool:FindFirstChildOfClass("BasePart")
            
            if hitboxPart then
                if Value then
                    local highlight = Instance.new("SelectionBox")
                    highlight.Name = "HitboxHighlight"
                    highlight.Adornee = hitboxPart
                    highlight.LineThickness = 0.1
                    highlight.Color3 = Color3.fromRGB(255, 0, 0)
                    highlight.Parent = hitboxPart
                else
                    local highlight = hitboxPart:FindFirstChild("HitboxHighlight")
                    if highlight then highlight:Destroy() end
                end
            end
        end
    end,
})

-- Info section
local InfoSection = HitboxTab:NewSection({Name = "Information"})

InfoSection:NewLabel({
    Name = "‚ÑπÔ∏è How to use:"
})

InfoSection:NewLabel({
    Name = "1. Set size (X, Y, Z) or use preset"
})

InfoSection:NewLabel({
    Name = "2. Equip tool"
})

InfoSection:NewLabel({
    Name = "3. Click 'Expand Current Tool'"
})

InfoSection:NewLabel({
    Name = "4. Or enable 'Auto-Expand' for automatic"
})

InfoSection:NewButton({
    Name = "üìä Show Current Tool Info",
    Callback = function()
        local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
        
        if tool then
            local hitboxPart = tool:FindFirstChild("Hitbox") or tool:FindFirstChild("Handle") or tool:FindFirstChildOfClass("BasePart")
            
            if hitboxPart then
                local size = hitboxPart.Size
                MyHub:Notify("Tool Info",
                    "Tool: " .. tool.Name .. "\n" ..
                    "Part: " .. hitboxPart.Name .. "\n" ..
                    "Size: " .. math.floor(size.X) .. "x" .. math.floor(size.Y) .. "x" .. math.floor(size.Z), 5)
            else
                MyHub:Notify("Info", "No hitbox part found!", 2)
            end
        else
            MyHub:Notify("Error", "No tool equipped!", 2)
        end
    end,
})


-- Alternative method - Hook at module level
InfoSection:NewToggle({
    Name = "test",
    CurrentValue = false,
    Flag = "give soul",
    Callback = function(Value)
_G.Give = Value
        if Value then
task.spawn(function()
while _G.Give do
task.wait(0.02)
local r = game:GetService("Players").LocalPlayer.PlayerGui.GlovesButton.KillstreakAwaButton.Gamepad

if r then
r:FireServer()
end
end
end)
end
end
})

-- Alternative method - Hook at module level
InfoSection:NewToggle({
    Name = "Kill Aura",
    CurrentValue = false,
    Flag = "killAura",
    Callback = function(Value)
_G.Killing = Value
        if Value then
task.spawn(function()

while _G.Killing do
wait(1)
sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", 112412400000)
sethiddenproperty(game.Players.LocalPlayer, "MaxSimulationRadius", 112412400000)
for i,d in pairs(game:GetService("Workspace"):GetDescendants()) do
    if d.ClassName == 'Humanoid' and d.Parent.Name ~= game.Players.LocalPlayer.Name then
        d.Health = 0
    end
end
end
end)
end
end,
})


local Other = Window:NewTab({Name = "Other"})
local OtherSection = Other:NewSection({Name = "time stop button‚úì‚úì‚úì‚úì"})

OtherSection:NewButton({
Name = "Get Time Stop Button",
Callback = function()
task.spawn(function()
if workspace.nhsjs4:FindFirstChildOfClass("Tool") or game.Players.LocalPlayer.Backpack:FindFirstChildOfClass("Tool") then
local v_u_1 = game:GetService("ReplicatedStorage")
local v2 = workspace.nhsjs4:FindFirstChildOfClass("Tool") or game.Players.LocalPlayer.Backpack:FindFirstChildOfClass("Tool")
v2:WaitForChild("Handle")
local v_u_3 = game:GetService("TweenService")
local v4 = game.Players.LocalPlayer:GetMouse()
local v5 = game.Players.LocalPlayer.PlayerGui
local v_u_6 = game:GetService("UserInputService")
local v_u_7 = false
local v_u_8 = false
local v_u_9 = v5:WaitForChild("SkillButtons"):WaitForChild("Buttons"):WaitForChild("CButton")
local v_u_10 = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)
local v_u_11 = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)
v_u_9.MouseButton1Down:Connect(function()
	-- upvalues: (ref) v_u_8, (ref) v_u_7, (copy) v_u_1, (copy) v_u_3, (copy) v_u_9, (copy) v_u_11, (copy) v_u_10
	if v_u_8 == true and v_u_7 == false then
		v_u_7 = true
		v_u_1:WaitForChild("StopTimeSkillP1"):FireServer("PararOTempo")
		v_u_3:Create(v_u_9.CD, v_u_11, {
			["Size"] = UDim2.new(1, 0, 1, 0)
		}):Play()
		wait(0.1)
		v_u_3:Create(v_u_9.CD, v_u_10, {
			["Size"] = UDim2.new(0, 0, 1, 0)
		}):Play()
		wait(1)
		v_u_7 = false
	end
end)
v2.Equipped:Connect(function()
	-- upvalues: (ref) v_u_8, (copy) v_u_9, (copy) v_u_6
	v_u_8 = true
	v_u_9.Visible = true
	if v_u_6.KeyboardEnabled then
		v_u_9.Skill.Text = "Z"
	elseif v_u_6.GamepadEnabled then
		v_u_9.Skill.Text = "RT"
	end
end)
v2.Unequipped:Connect(function()
	-- upvalues: (ref) v_u_8, (copy) v_u_9
	v_u_8 = false
	v_u_9.Visible = false
end)
v4.KeyDown:Connect(function(p12)
	-- upvalues: (ref) v_u_8, (ref) v_u_7, (copy) v_u_1, (copy) v_u_3, (copy) v_u_9, (copy) v_u_11, (copy) v_u_10
	if p12 == "z" and (v_u_8 == true and v_u_7 == false) then
		v_u_7 = true
		v_u_1:WaitForChild("StopTimeSkillP1"):FireServer("PararOTempo")
		v_u_3:Create(v_u_9.CD, v_u_11, {
			["Size"] = UDim2.new(1, 0, 1, 0)
		}):Play()
		wait(0.1)
		v_u_3:Create(v_u_9.CD, v_u_10, {
			["Size"] = UDim2.new(0, 0, 1, 0)
		}):Play()
		wait(1)
		v_u_7 = false
	end
end)
v_u_6.InputBegan:Connect(function(p13)
	-- upvalues: (ref) v_u_8, (ref) v_u_7, (copy) v_u_1, (copy) v_u_3, (copy) v_u_9, (copy) v_u_11, (copy) v_u_10
	if p13.KeyCode == Enum.KeyCode.ButtonR2 and (v_u_8 == true and v_u_7 == false) then
		v_u_7 = true
		v_u_1:WaitForChild("StopTimeSkillP1"):FireServer("PararOTempo")
		v_u_3:Create(v_u_9.CD, v_u_11, {
			["Size"] = UDim2.new(1, 0, 1, 0)
		}):Play()
		wait(0.1)
		v_u_3:Create(v_u_9.CD, v_u_10, {
			["Size"] = UDim2.new(0, 0, 1, 0)
		}):Play()
		wait(1)
		v_u_7 = false
	end
end) 
end)
end
end
})

end)
